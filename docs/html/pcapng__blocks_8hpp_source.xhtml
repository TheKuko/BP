<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Network Traffic Capture With Application Tags: src/pcapng_blocks.hpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Network Traffic Capture With Application Tags
   </div>
   <div id="projectbrief">Bachelor&#39;s Thesis, FIT VUT</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('pcapng__blocks_8hpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">pcapng_blocks.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="pcapng__blocks_8hpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#pragma once</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;cstdint&gt;</span>              <span class="comment">//  uint32_t, uint16_t, uint64_t, int8_t</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span>              <span class="comment">//  ofstream</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span>               <span class="comment">//  string</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span>               <span class="comment">//  vector</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span>                  <span class="comment">//  map</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#if defined(__linux__)</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span>              <span class="comment">//  strlen()</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a>&quot;</span>    <span class="comment">//  ETHER_MAX_LEN</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cache_8hpp.xhtml">cache.hpp</a>&quot;</span>            <span class="comment">//  TEntry</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.xhtml">debug.hpp</a>&quot;</span>            <span class="comment">//  D()</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#ifdef UNUSED</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; <span class="comment">/* nothing */</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#elif defined(__linux__)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"># define UNUSED(x) x</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#elif defined(__GNUC__)</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#  define UNUSED(x) x __attribute__((unused))</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; <span class="comment">//#  define UNUSED(x) x [[gnu::unused]]</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; <span class="comment">//#elif defined(__LCLINT__)</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#elif defined(_WIN32)</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#  define UNUSED(x) </span><span class="comment">/*@unused@*/</span><span class="preprocessor"> x</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="preprocessor">#else                </span><span class="comment">/* !__GNUC__ &amp;&amp; !__LCLINT__ */</span><span class="preprocessor"></span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">   40</a></span>&#160;<span class="preprocessor">#  define UNUSED(x) x</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#endif </span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespacestd.xhtml">std</a>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">extern</span> <span class="keyword">const</span> <span class="keywordtype">char</span> * <a class="code" href="pcapng__blocks_8hpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">extern</span> map&lt;string, vector&lt;TOOL::Netflow *&gt;&gt; <a class="code" href="pcapng__blocks_8hpp.xhtml#ad922b0d65f831e5d7ad4f36ec88ba968">g_finalResults</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_t_o_o_l.xhtml">TOOL</a></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;   </div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">   62</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(<span class="keywordtype">int</span> num, <span class="keywordtype">int</span> multiple)</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span> (multiple == 0)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">int</span> remainder = num % multiple;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> (remainder == 0)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> multiple - remainder;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#pragma pack(push, 1)</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_section_header_block.xhtml">   79</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_t_o_o_l_1_1_section_header_block.xhtml">SectionHeaderBlock</a> {</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockType)              = 0x0A0D0D0A;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength)       = <span class="keyword">sizeof</span>(*this) - <span class="keyword">sizeof</span>(options.shb_os.optionValue);</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t byteOrderMagic)         = 0x1A2B3C4D;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t majorVersion)           = 1;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t minorVersion)           = 0;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(int64_t sectionLength)           = -1;  <span class="comment">// (not specified)</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keyword">struct </span>{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 3;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 0;        <span class="comment">// *** will be updated in constructor</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(<span class="keywordtype">char</span> *optionValue)       = <span class="keyword">nullptr</span>;  <span class="comment">// *** will be updated in constructor</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        } shb_os;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 4;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 5;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(<span class="keywordtype">char</span> optionValue[5])     = <span class="stringliteral">&quot;tool&quot;</span>;   </div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint8_t padding[3])      = {0};</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        } shb_userappl;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keyword">struct </span>endOfOption {</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 0;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        } eop;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    } options;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength2)      = blockTotalLength;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_section_header_block.xhtml#abfbaf079b946d2b711a91309c84dabbe">  112</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_section_header_block.xhtml#abfbaf079b946d2b711a91309c84dabbe">SectionHeaderBlock</a>(<span class="keywordtype">string</span> &amp; os) </div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    { </div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">int</span> len = os.length();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        options.shb_os.optionLength = len;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        options.shb_os.optionValue = <span class="keyword">new</span> <span class="keywordtype">char</span>[len];</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        os.copy(options.shb_os.optionValue, len); </div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        blockTotalLength += options.shb_os.optionLength + <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.shb_os.optionLength, 4);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        blockTotalLength2 = blockTotalLength;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    }</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_section_header_block.xhtml#af6f3d84500a3760da968fe06132081e3">  125</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_section_header_block.xhtml#af6f3d84500a3760da968fe06132081e3">~SectionHeaderBlock</a>()</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    {</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keyword">delete</span> [] options.shb_os.optionValue;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_section_header_block.xhtml#ac5f95e429a966c9f2c026d48c5c1ddf3">  133</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_section_header_block.xhtml#ac5f95e429a966c9f2c026d48c5c1ddf3">write</a>(ofstream &amp; file)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    { </div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordtype">char</span> * tmpPtr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordtype">size_t</span> partToWrite = 4+4+4+2+2+8+2+2;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        file.write(tmpPtr, partToWrite); </div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        file.write(options.shb_os.optionValue, options.shb_os.optionLength);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordtype">int</span> paddingLen = <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.shb_os.optionLength, 4);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> padding = 0;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">while</span>(paddingLen--)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            file.write(&amp;padding, <span class="keyword">sizeof</span>(padding));</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        tmpPtr += partToWrite + <span class="keyword">sizeof</span>(options.shb_os.optionValue);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        partToWrite = 2+2+5+3+2+2+4;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        file.write(tmpPtr, partToWrite); </div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;};</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_interface_description_block.xhtml">  159</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_t_o_o_l_1_1_interface_description_block.xhtml">InterfaceDescriptionBlock</a> {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockType)              = 0x00000001;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength)       = <span class="keyword">sizeof</span>(*this) </div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                                    - <span class="keyword">sizeof</span>(options.if_name.optionValue) </div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                                    - <span class="keyword">sizeof</span>(options.if_os.optionValue);   <span class="comment">// *** will be updated in constructor</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t linkType)               = 1;        <span class="comment">// LINKTYPE_ETHERNET(1) / LINKTYPE_IPV4(22) / LINKTYPE_IPV6(229)</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t reserved)               = 0;        <span class="comment">// must be filled with 0, and ignored by file readers</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t snapLen)                = BUFSIZ;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">struct </span>{</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 2;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = strlen(<a class="code" href="pcapng__blocks_8hpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *optionValue) = <a class="code" href="pcapng__blocks_8hpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        } if_name;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 9;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 1;        </div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t optionValue)    = 6;        </div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        } if_tsresol;</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">struct </span>{</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 12;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 0;        <span class="comment">// *** will be updated in constructor</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(<span class="keywordtype">char</span> *optionValue)       = <span class="keyword">nullptr</span>;  <span class="comment">// *** will be updated in constructor</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        } if_os;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keyword">struct </span>endOfOption {</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionCode)     = 0;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint16_t optionLength)   = 0;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        } eop;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    } options;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength2)      = blockTotalLength;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_interface_description_block.xhtml#af4e63d9a6c85283ead1c02dc13492d9f">  196</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_interface_description_block.xhtml#af4e63d9a6c85283ead1c02dc13492d9f">InterfaceDescriptionBlock</a>(<span class="keywordtype">string</span> &amp; os) </div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    { </div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordtype">int</span> len = os.length();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        options.if_os.optionLength = len;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        options.if_os.optionValue = <span class="keyword">new</span> <span class="keywordtype">char</span>[len];</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        os.copy(options.if_os.optionValue, len);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        blockTotalLength += options.if_name.optionLength + <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.if_name.optionLength, 4) + options.if_os.optionLength + <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.if_os.optionLength, 4);</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        blockTotalLength2 = blockTotalLength;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_interface_description_block.xhtml#af72523cd1e10fde610beaaf568303880">  209</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_interface_description_block.xhtml#af72523cd1e10fde610beaaf568303880">~InterfaceDescriptionBlock</a>()</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keyword">delete</span> [] options.if_os.optionValue;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    }</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_interface_description_block.xhtml#afbe104978bc51d590703e8c3a3922289">  217</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_interface_description_block.xhtml#afbe104978bc51d590703e8c3a3922289">write</a>(ofstream &amp; file)</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    { </div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordtype">char</span> * tmpPtr = <span class="keyword">reinterpret_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="keywordtype">size_t</span> partToWrite = 4+4+2+2+4+2+2;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        file.write(tmpPtr, partToWrite); </div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        file.write(options.if_name.optionValue, options.if_name.optionLength);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordtype">int</span> paddingLen = <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.if_name.optionLength, 4);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> padding = 0;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">while</span>(paddingLen--)</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            file.write(&amp;padding, <span class="keyword">sizeof</span>(padding));</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        tmpPtr += partToWrite + <span class="keyword">sizeof</span>(options.if_name.optionValue);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        partToWrite = 2+2+4+2+2;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        file.write(tmpPtr, partToWrite);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        file.write(options.if_os.optionValue, options.if_os.optionLength);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        paddingLen = <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(options.if_os.optionLength, 4);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordflow">while</span>(paddingLen--)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            file.write(&amp;padding, <span class="keyword">sizeof</span>(padding));</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        tmpPtr += partToWrite + <span class="keyword">sizeof</span>(options.if_os.optionValue);</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        partToWrite = 2+2+4;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        file.write(tmpPtr, partToWrite); </div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;};</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div><div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml">  250</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml">EnhancedPacketBlock</a> {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockType)              = 0x00000006;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength)       = <span class="keyword">sizeof</span>(*this)-<span class="keyword">sizeof</span>(allocatedBytes)-<span class="keyword">sizeof</span>(packetData);    <span class="comment">// will be updated in write()</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t interfaceID)            = 0;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t timestampHi)            = 0;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t timestampLo)            = 0;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t capturedPacketLength)   = 0;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t originalPacketLength)   = 0;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(<span class="keywordtype">size_t</span> allocatedBytes)           = <a class="code" href="tcpip__headers_8hpp.xhtml#a4baa77b0245fb4398faaecfc9b803649">ETHERMTU</a>; <span class="comment">// not in EnhancedPacketBlock</span></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint8_t *packetData)              = <span class="keyword">nullptr</span>;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength2)      = blockTotalLength;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00268"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a81bc9f2c6948d94ae92dabf38fa7325a">  268</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a81bc9f2c6948d94ae92dabf38fa7325a">EnhancedPacketBlock</a>()     { packetData = (uint8_t*)malloc(<a class="code" href="tcpip__headers_8hpp.xhtml#a4baa77b0245fb4398faaecfc9b803649">ETHERMTU</a>); <span class="keywordflow">if</span> (packetData == <span class="keyword">nullptr</span>) <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Err&quot;</span>; }</div><div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#ac7c65de764ab8c881e09eb41c6fc9952">  272</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#ac7c65de764ab8c881e09eb41c6fc9952">~EnhancedPacketBlock</a>()    { free(packetData); }</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a25b5cad2cd0a89d977d34bba4a8fbaf6">  278</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a25b5cad2cd0a89d977d34bba4a8fbaf6">setTimestamp</a>(uint64_t timestamp) { timestampLo = timestamp &amp; 0xffffffff; timestampHi = timestamp &gt;&gt; 32; }</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#af1164e506f4ac6c7f0827941567520d8">  283</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#af1164e506f4ac6c7f0827941567520d8">setCapturedPacketLength</a>(uint32_t len) { capturedPacketLength = len; }</div><div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#abe57324e3ceb511652bc632536612163">  288</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#abe57324e3ceb511652bc632536612163">setOriginalPacketLength</a>(uint32_t len) { originalPacketLength = len; }</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a193a880e22349e25d2c8cc0dfb595045">  297</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a193a880e22349e25d2c8cc0dfb595045">setPacketData</a>(<span class="keyword">const</span> uint8_t *ptr, uint32_t len) </div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">if</span> (len &gt; allocatedBytes)</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        {</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            uint8_t *tmpPtr = (uint8_t*)realloc(packetData, len);</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">if</span> (tmpPtr == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Err&quot;</span>; </div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            packetData = tmpPtr;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            allocatedBytes = len;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="comment">// http://stackoverflow.com/questions/31898617/receiving-tcp-segments-bigger-than-mtu-with-libpcap </span></div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        memcpy((<span class="keywordtype">void</span>*)packetData, ptr, len); </div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        capturedPacketLength = len; </div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a335f205270198cfe1aacfbcc61b5b6c5">  315</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a335f205270198cfe1aacfbcc61b5b6c5">write</a>(ofstream &amp; file)</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    { </div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> padding = 0;</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordtype">int</span> paddingLen = <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(capturedPacketLength, 4);</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        blockTotalLength += capturedPacketLength + paddingLen;  <span class="comment">// because of += everytime when write() is called, we have to restore default length before the function returns</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        blockTotalLength2 = blockTotalLength;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(<span class="keyword">this</span>), <span class="keyword">sizeof</span>(*<span class="keyword">this</span>)-<span class="keyword">sizeof</span>(blockTotalLength2)-<span class="keyword">sizeof</span>(packetData)-<span class="keyword">sizeof</span>(allocatedBytes));</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        file.write(reinterpret_cast&lt;const char*&gt;(packetData), capturedPacketLength);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">while</span>(paddingLen--)</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            file.write(&amp;padding, <span class="keyword">sizeof</span>(padding));</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;blockTotalLength2), <span class="keyword">sizeof</span>(blockTotalLength2));</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        blockTotalLength = <span class="keyword">sizeof</span>(*this)-<span class="keyword">sizeof</span>(allocatedBytes)-<span class="keyword">sizeof</span>(packetData);    <span class="comment">// restore default size of empty block</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    }</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;};</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_custom_block.xhtml">  337</a></span>&#160;<span class="keyword">class </span><a class="code" href="class_t_o_o_l_1_1_custom_block.xhtml">CustomBlock</a> {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockType)              = 0x40000BAD;</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength)       = <span class="keyword">sizeof</span>(*this); <span class="comment">// **** will be updated in write()</span></div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t PrivateEnterpriseNumber)= 0x1234;   </div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="comment">/* custom data */</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <a class="code" href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a>(uint32_t blockTotalLength2)      = blockTotalLength;</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_custom_block.xhtml#a7828c3facc271545eb8df8feb786ab12">  347</a></span>&#160;    <a class="code" href="class_t_o_o_l_1_1_custom_block.xhtml#a7828c3facc271545eb8df8feb786ab12">CustomBlock</a>() </div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        { }</div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="class_t_o_o_l_1_1_custom_block.xhtml#aef9b0da921b7014d415c3afc4b2f3dab">  354</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="class_t_o_o_l_1_1_custom_block.xhtml#aef9b0da921b7014d415c3afc4b2f3dab">write</a>(ofstream &amp; file)</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    { </div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;blockType), <span class="keyword">sizeof</span>(blockType));</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        streamoff pos_blockTotalLength = file.tellp();</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;blockTotalLength), <span class="keyword">sizeof</span>(blockTotalLength));</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;PrivateEnterpriseNumber), <span class="keyword">sizeof</span>(PrivateEnterpriseNumber));</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        </div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> writtenBytes = 0;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordtype">string</span> appname;</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> app : <a class="code" href="pcapng__blocks_8hpp.xhtml#ad922b0d65f831e5d7ad4f36ec88ba968">g_finalResults</a>)</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        {</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            uint8_t size = app.first.length();</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            appname = app.first;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="preprocessor">#ifdef _WIN32 // windows appname is in quotes</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="comment">            if (appname[0] == &#39;&quot;&#39;)</span></div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="comment">            {</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment">                appname.erase(0,1);                 // delete the first quote</span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">                //appname.replace(appname.begin(), appname.end(),&#39; &#39;,&#39;\0&#39;); // replace spaces with \0</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">                //appname[size - 1] = &#39; &#39;;        // substitute the last &#39;&quot;&#39; with terminating zero</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">                size--;                          // we skip the first byte</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">            }</span></div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="comment">            else</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment">                log(LogLevel::ERR, &quot;Should not happen&quot;);</span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="preprocessor">#else // linux sometimes does not have terminating \0 in /proc/pid/fd/cmdline</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">if</span> (app.first[size - 1] != <span class="charliteral">&#39;\0&#39;</span>)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            {</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                size++;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                appname.append(1,<span class="charliteral">&#39;\0&#39;</span>);           <span class="comment">// append terminating \0</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            file.write(reinterpret_cast&lt;char*&gt;(&amp;size), <span class="keyword">sizeof</span>(size));</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            writtenBytes += <span class="keyword">sizeof</span>(size);</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            file.write(appname.c_str(), size);</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            writtenBytes += size;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            uint32_t records = app.second.size();</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            file.write(reinterpret_cast&lt;char*&gt;(&amp;records), <span class="keyword">sizeof</span>(records));</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            writtenBytes += <span class="keyword">sizeof</span>(records);</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> v : app.second)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                writtenBytes += v-&gt;write(file);</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        }</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> padding = 0;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordtype">int</span> paddingLen = <a class="code" href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">computePaddingLen</a>(writtenBytes, 4);</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        blockTotalLength += writtenBytes + paddingLen;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">while</span>(paddingLen--)</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            file.write(&amp;padding, <span class="keyword">sizeof</span>(padding));</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        blockTotalLength2 = blockTotalLength;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;blockTotalLength2), <span class="keyword">sizeof</span>(blockTotalLength2)); </div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        file.seekp(pos_blockTotalLength);</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        file.write(reinterpret_cast&lt;char*&gt;(&amp;blockTotalLength), <span class="keyword">sizeof</span>(blockTotalLength)); </div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;};</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">#pragma pack(pop)</span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment"> * Attributes provide the unified standard syntax for implementation-defined language extensions, </span></div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"> * such as the GNU and IBM language extensions __attribute__((...)), </span></div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"> * Microsoft extension __declspec(), etc.</span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}   <span class="comment">// namespace TOOL</span></div><div class="ttc" id="pcapng__blocks_8hpp_xhtml_a75a7bcda686113f2f624591c4b496013"><div class="ttname"><a href="pcapng__blocks_8hpp.xhtml#a75a7bcda686113f2f624591c4b496013">TOOL::computePaddingLen</a></div><div class="ttdeci">int computePaddingLen(int num, int multiple)</div><div class="ttdoc">Computes number of padding bytes to be inserted in order to reach multiple of x. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00062">pcapng_blocks.hpp:62</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_af1164e506f4ac6c7f0827941567520d8"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#af1164e506f4ac6c7f0827941567520d8">TOOL::EnhancedPacketBlock::setCapturedPacketLength</a></div><div class="ttdeci">void setCapturedPacketLength(uint32_t len)</div><div class="ttdoc">Set method for #TOOL::EnhancedPacketBlock::capturedPacketLength. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00283">pcapng_blocks.hpp:283</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml"><div class="ttname"><a href="debug_8hpp.xhtml">debug.hpp</a></div><div class="ttdoc">Debugging functions. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_abe57324e3ceb511652bc632536612163"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#abe57324e3ceb511652bc632536612163">TOOL::EnhancedPacketBlock::setOriginalPacketLength</a></div><div class="ttdeci">void setOriginalPacketLength(uint32_t len)</div><div class="ttdoc">Set method for #TOOL::EnhancedPacketBlock::originalPacketLength. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00288">pcapng_blocks.hpp:288</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_a193a880e22349e25d2c8cc0dfb595045"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a193a880e22349e25d2c8cc0dfb595045">TOOL::EnhancedPacketBlock::setPacketData</a></div><div class="ttdeci">void setPacketData(const uint8_t *ptr, uint32_t len)</div><div class="ttdoc">Set method for #TOOL::EnhancedPacketBlock::packetData. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00297">pcapng_blocks.hpp:297</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_section_header_block_xhtml_abfbaf079b946d2b711a91309c84dabbe"><div class="ttname"><a href="class_t_o_o_l_1_1_section_header_block.xhtml#abfbaf079b946d2b711a91309c84dabbe">TOOL::SectionHeaderBlock::SectionHeaderBlock</a></div><div class="ttdeci">SectionHeaderBlock(string &amp;os)</div><div class="ttdoc">Class constructor. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00112">pcapng_blocks.hpp:112</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_ac7c65de764ab8c881e09eb41c6fc9952"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#ac7c65de764ab8c881e09eb41c6fc9952">TOOL::EnhancedPacketBlock::~EnhancedPacketBlock</a></div><div class="ttdeci">~EnhancedPacketBlock()</div><div class="ttdoc">Default d&amp;#39;tor that deletes preallocated packet memory. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00272">pcapng_blocks.hpp:272</a></div></div>
<div class="ttc" id="pcapng__blocks_8hpp_xhtml_a86d500a34c624c2cae56bc25a31b12f3"><div class="ttname"><a href="pcapng__blocks_8hpp.xhtml#a86d500a34c624c2cae56bc25a31b12f3">UNUSED</a></div><div class="ttdeci">#define UNUSED(x)</div><div class="ttdoc">Macro to hide compiler warning messages about unused variables. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00040">pcapng_blocks.hpp:40</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_section_header_block_xhtml_ac5f95e429a966c9f2c026d48c5c1ddf3"><div class="ttname"><a href="class_t_o_o_l_1_1_section_header_block.xhtml#ac5f95e429a966c9f2c026d48c5c1ddf3">TOOL::SectionHeaderBlock::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes whole block into the file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00133">pcapng_blocks.hpp:133</a></div></div>
<div class="ttc" id="namespacestd_xhtml"><div class="ttname"><a href="namespacestd.xhtml">std</a></div></div>
<div class="ttc" id="pcapng__blocks_8hpp_xhtml_ad922b0d65f831e5d7ad4f36ec88ba968"><div class="ttname"><a href="pcapng__blocks_8hpp.xhtml#ad922b0d65f831e5d7ad4f36ec88ba968">g_finalResults</a></div><div class="ttdeci">map&lt; string, vector&lt; TOOL::Netflow * &gt; &gt; g_finalResults</div><div class="ttdoc">Applications and their netflows. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00086">capturing.cpp:86</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_custom_block_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_custom_block.xhtml">TOOL::CustomBlock</a></div><div class="ttdoc">Class with custom data. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00337">pcapng_blocks.hpp:337</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_section_header_block_xhtml_af6f3d84500a3760da968fe06132081e3"><div class="ttname"><a href="class_t_o_o_l_1_1_section_header_block.xhtml#af6f3d84500a3760da968fe06132081e3">TOOL::SectionHeaderBlock::~SectionHeaderBlock</a></div><div class="ttdeci">~SectionHeaderBlock()</div><div class="ttdoc">Deletes allocated memory § </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00125">pcapng_blocks.hpp:125</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a></div><div class="ttdoc">Protocol headers. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_a335f205270198cfe1aacfbcc61b5b6c5"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a335f205270198cfe1aacfbcc61b5b6c5">TOOL::EnhancedPacketBlock::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes whole block into the output file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00315">pcapng_blocks.hpp:315</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a4baa77b0245fb4398faaecfc9b803649"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a4baa77b0245fb4398faaecfc9b803649">ETHERMTU</a></div><div class="ttdeci">#define ETHERMTU</div><div class="ttdoc">Maximum transmission unit. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00031">tcpip_headers.hpp:31</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml">TOOL::EnhancedPacketBlock</a></div><div class="ttdoc">Class used to store packet and information about it. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00250">pcapng_blocks.hpp:250</a></div></div>
<div class="ttc" id="pcapng__blocks_8hpp_xhtml_a66c99b5dfab9066869a377e3a4f8cc7f"><div class="ttname"><a href="pcapng__blocks_8hpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a></div><div class="ttdeci">const char * g_dev</div><div class="ttdoc">Capturing device name. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00088">capturing.cpp:88</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_a25b5cad2cd0a89d977d34bba4a8fbaf6"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a25b5cad2cd0a89d977d34bba4a8fbaf6">TOOL::EnhancedPacketBlock::setTimestamp</a></div><div class="ttdeci">void setTimestamp(uint64_t timestamp)</div><div class="ttdoc">Set method for #TOOL::EnhancedPacketBlock::timestampHi and #TOOL::EnhancedPacketBlock::timestampLo. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00278">pcapng_blocks.hpp:278</a></div></div>
<div class="ttc" id="cache_8hpp_xhtml"><div class="ttname"><a href="cache_8hpp.xhtml">cache.hpp</a></div><div class="ttdoc">Cache implementation header file. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_custom_block_xhtml_aef9b0da921b7014d415c3afc4b2f3dab"><div class="ttname"><a href="class_t_o_o_l_1_1_custom_block.xhtml#aef9b0da921b7014d415c3afc4b2f3dab">TOOL::CustomBlock::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes the whole block into the file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00354">pcapng_blocks.hpp:354</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_custom_block_xhtml_a7828c3facc271545eb8df8feb786ab12"><div class="ttname"><a href="class_t_o_o_l_1_1_custom_block.xhtml#a7828c3facc271545eb8df8feb786ab12">TOOL::CustomBlock::CustomBlock</a></div><div class="ttdeci">CustomBlock()</div><div class="ttdoc">Default c&amp;#39;tor. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00347">pcapng_blocks.hpp:347</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_interface_description_block_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_interface_description_block.xhtml">TOOL::InterfaceDescriptionBlock</a></div><div class="ttdoc">Block with a description of the interface used to capture network traffic. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00159">pcapng_blocks.hpp:159</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_interface_description_block_xhtml_af4e63d9a6c85283ead1c02dc13492d9f"><div class="ttname"><a href="class_t_o_o_l_1_1_interface_description_block.xhtml#af4e63d9a6c85283ead1c02dc13492d9f">TOOL::InterfaceDescriptionBlock::InterfaceDescriptionBlock</a></div><div class="ttdeci">InterfaceDescriptionBlock(string &amp;os)</div><div class="ttdoc">Class constructor that sets options lengths and block total length. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00196">pcapng_blocks.hpp:196</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_section_header_block_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_section_header_block.xhtml">TOOL::SectionHeaderBlock</a></div><div class="ttdoc">Section header block which has to be at the beginning of each section in the file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00079">pcapng_blocks.hpp:79</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_interface_description_block_xhtml_afbe104978bc51d590703e8c3a3922289"><div class="ttname"><a href="class_t_o_o_l_1_1_interface_description_block.xhtml#afbe104978bc51d590703e8c3a3922289">TOOL::InterfaceDescriptionBlock::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes the whole block into the file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00217">pcapng_blocks.hpp:217</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_enhanced_packet_block_xhtml_a81bc9f2c6948d94ae92dabf38fa7325a"><div class="ttname"><a href="class_t_o_o_l_1_1_enhanced_packet_block.xhtml#a81bc9f2c6948d94ae92dabf38fa7325a">TOOL::EnhancedPacketBlock::EnhancedPacketBlock</a></div><div class="ttdeci">EnhancedPacketBlock()</div><div class="ttdoc">Default c&amp;#39;tor that preallocates memory for packet. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00268">pcapng_blocks.hpp:268</a></div></div>
<div class="ttc" id="namespace_t_o_o_l_xhtml"><div class="ttname"><a href="namespace_t_o_o_l.xhtml">TOOL</a></div><div class="ttdef"><b>Definition:</b> <a href="cache_8cpp_source.xhtml#l00037">cache.cpp:37</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_interface_description_block_xhtml_af72523cd1e10fde610beaaf568303880"><div class="ttname"><a href="class_t_o_o_l_1_1_interface_description_block.xhtml#af72523cd1e10fde610beaaf568303880">TOOL::InterfaceDescriptionBlock::~InterfaceDescriptionBlock</a></div><div class="ttdeci">~InterfaceDescriptionBlock()</div><div class="ttdoc">Default destructor that deletes allocated memory used by options. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00209">pcapng_blocks.hpp:209</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="pcapng__blocks_8hpp.xhtml">pcapng_blocks.hpp</a></li>
    <li class="footer">Generated on Thu May 25 2017 17:05:08 for Network Traffic Capture With Application Tags by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
