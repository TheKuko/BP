<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Network Traffic Capture With Application Tags: src/utils.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Network Traffic Capture With Application Tags
   </div>
   <div id="projectbrief">Bachelor&#39;s Thesis, FIT VUT</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('utils_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">utils.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="utils_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;cctype&gt;</span>               <span class="comment">//  isdigit()</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#if defined(__APPLE__) || defined(__linux__)</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span>      <span class="comment">// memset(), strlen() #linux</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#elif defined(_WIN32)</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &lt;WTypes.h&gt;</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a>&quot;</span>    <span class="comment">//  IPv4_ADDRSTRLEN</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.xhtml">debug.hpp</a>&quot;</span>            <span class="comment">//  log()</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespace_n_a_m_o_n.xhtml">NAMON</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="utils_8cpp.xhtml#ab5404d89c33dfee3caf9d6e2879bd9b1">   30</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="utils_8cpp.xhtml#ab5404d89c33dfee3caf9d6e2879bd9b1">chToInt</a>(<span class="keywordtype">char</span> *str, <span class="keywordtype">int</span> &amp;res)</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keywordflow">for</span>(res = 0; *str; str++)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">if</span> (!isdigit(*str))</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        res = res*10 + (*str - <span class="charliteral">&#39;0&#39;</span>);</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;}</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="utils_8cpp.xhtml#ae2e90146442e37ba0216dbb0ac0f6688">   43</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="utils_8cpp.xhtml#ae2e90146442e37ba0216dbb0ac0f6688">inet_ntop4</a>(<span class="keyword">const</span> <span class="keywordtype">void</span> *src, <span class="keywordtype">char</span> *dst, <span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *srcaddr = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)src;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> digits[] = <span class="stringliteral">&quot;0123456789&quot;</span>;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (size &lt; <a class="code" href="tcpip__headers_8hpp.xhtml#aa6201c439f1158407165ee382b5e2df4">IPv4_ADDRSTRLEN</a>)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    </div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="tcpip__headers_8hpp.xhtml#a03283e6460404e870cdcc56e57394e43">IPv4_ADDRLEN</a>; ++i) </div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordtype">int</span> n = *srcaddr++;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordtype">int</span> non_zerop = 0;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> (non_zerop || n / 100 &gt; 0) </div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            *dst++ = digits[n / 100];</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            n %= 100;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            non_zerop = 1;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span> (non_zerop || n / 10 &gt; 0) </div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            *dst++ = digits[n / 10];</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            n %= 10;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            non_zerop = 1;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        *dst++ = digits[n]; </div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">if</span> (i != 3)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            *dst++ = <span class="charliteral">&#39;.&#39;</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    *dst++ = <span class="charliteral">&#39;\0&#39;</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keywordtype">int</span> inet_ntop6(<span class="keyword">const</span> <span class="keywordtype">void</span> *src, <span class="keywordtype">char</span> *dst, <span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;{</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *srcaddr = (<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *)src;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">char</span> *dp;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordtype">size_t</span> space_left, added_space;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordtype">int</span> snprintfed;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">int</span> int16sz = <span class="keyword">sizeof</span>(int16_t);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="keyword">struct </span>{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordtype">long</span> base;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordtype">long</span> len;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    } best, cur;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> words[<a class="code" href="tcpip__headers_8hpp.xhtml#a180abd840f2fad8dfd4f33f7e8467b67">IPv6_ADDRLEN</a> / int16sz];</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>  i;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">/* Preprocess:</span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">    *  Copy the input (bytewise) array into a wordwise array.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">    *  Find the longest run of 0x00&#39;s in src[] for :: shorthanding.</span></div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    memset(words, 0, <span class="keyword">sizeof</span>(words));</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; <a class="code" href="tcpip__headers_8hpp.xhtml#a180abd840f2fad8dfd4f33f7e8467b67">IPv6_ADDRLEN</a>; i++)</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        words[i / 2] |= (srcaddr[i] &lt;&lt; ((1 - (i % 2)) &lt;&lt; 3));</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    best.len = 0;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    best.base = -1;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    cur.len = 0;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    cur.base = -1;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; (IPv6_ADDRLEN / int16sz); i++)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">if</span> (words[i] == 0)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">if</span> (cur.base == -1)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                cur.base = i, cur.len = 1;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">else</span> cur.len++;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (cur.base != -1)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            <span class="keywordflow">if</span> (best.base == -1 || cur.len &gt; best.len)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                best = cur;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            cur.base = -1;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> ((cur.base != -1) &amp;&amp; (best.base == -1 || cur.len &gt; best.len))</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        best = cur;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> (best.base != -1 &amp;&amp; best.len &lt; 2)</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        best.base = -1;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="comment">/* Format the result.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    dp = dst;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    space_left = size;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#define APPEND_CHAR(c) \</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">    { \</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">        if (space_left == 0) { \</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">            errno = ENOSPC; \</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">            return (0); \</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">        } \</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">        *dp++ = c; \</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">        space_left--; \</span></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">    }</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">for</span> (i = 0; i &lt; (IPv6_ADDRLEN / int16sz); i++)</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    {</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">/* Are we inside the best run of 0x00&#39;s?</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> (best.base != -1 &amp;&amp; i &gt;= best.base &amp;&amp; i &lt; (best.base + best.len))</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="keywordflow">if</span> (i == best.base)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                APPEND_CHAR(<span class="charliteral">&#39;:&#39;</span>);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment">/* Are we following an initial run of 0x00s or any real hex?</span></div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> (i != 0)</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            APPEND_CHAR(<span class="charliteral">&#39;:&#39;</span>);</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="comment">/* Is this address an encapsulated IPv4?</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">        */</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <span class="keywordflow">if</span> (i == 6 &amp;&amp; best.base == 0 &amp;&amp;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            (best.len == 6 || (best.len == 5 &amp;&amp; words[5] == 0xffff)))</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        {</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">if</span> (!<a class="code" href="utils_8cpp.xhtml#ae2e90146442e37ba0216dbb0ac0f6688">inet_ntop4</a>(srcaddr + 12, dp, space_left))</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            added_space = strlen(dp);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            dp += added_space;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            space_left -= added_space;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        snprintfed = snprintf(dp, space_left, <span class="stringliteral">&quot;%lx&quot;</span>, words[i]);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span> (snprintfed &lt; 0)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">if</span> ((<span class="keywordtype">size_t</span>)snprintfed &gt;= space_left)</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        {</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        }</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        dp += snprintfed;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        space_left -= snprintfed;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="comment">/* Was it a trailing run of 0x00&#39;s?</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">if</span> (best.base != -1 &amp;&amp; (best.base + best.len) == (IPv6_ADDRLEN / int16sz))</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        APPEND_CHAR(<span class="charliteral">&#39;:&#39;</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    APPEND_CHAR(<span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keywordtype">int</span> inet_ntop(<span class="keyword">const</span> <span class="keywordtype">int</span> af, <span class="keyword">const</span> <span class="keywordtype">void</span> *src, <span class="keywordtype">char</span> *dst, <span class="keywordtype">size_t</span> size)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">if</span> (af == AF_INET)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="utils_8cpp.xhtml#ae2e90146442e37ba0216dbb0ac0f6688">inet_ntop4</a>(src, dst, size);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (af == AF_INET6)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> inet_ntop6(src, dst, size);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a9f1c1527f51faaaca3be83b5a8928ca5">log</a>(LogLevel::ERR, <span class="stringliteral">&quot;inet_ntop: Unexpected address family&quot;</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}   <span class="comment">// namespace NAMON</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">// Source: https://stackoverflow.com/questions/6284524/bstr-to-stdstring-stdwstring-and-vice-versa</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;std::string ConvertBSTRToMBS(BSTR bstr)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;{</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keywordtype">int</span> wslen = ::SysStringLen(bstr);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> ConvertWCSToMBS((<span class="keywordtype">wchar_t</span>*)bstr, wslen);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;std::string ConvertWCSToMBS(<span class="keyword">const</span> <span class="keywordtype">wchar_t</span>* pstr, <span class="keywordtype">long</span> wslen)</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;{</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">int</span> len = ::WideCharToMultiByte(CP_ACP, 0, pstr, wslen, NULL, 0, NULL, NULL);</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    std::string dblstr(len, <span class="charliteral">&#39;\0&#39;</span>);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    len = ::WideCharToMultiByte(CP_ACP, 0 <span class="comment">/* no flags */</span>,</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        pstr, wslen <span class="comment">/* not necessary NULL-terminated */</span>,</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        &amp;dblstr[0], len,</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        NULL, NULL <span class="comment">/* no default char */</span>);</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">return</span> dblstr;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;}</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;BSTR ConvertMBSToBSTR(<span class="keyword">const</span> std::string&amp; str)</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;{</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">int</span> wslen = ::MultiByteToWideChar(CP_ACP, 0 <span class="comment">/* no flags */</span>,</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        str.data(), str.length(),</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        NULL, 0);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    BSTR wsdata = ::SysAllocStringLen(NULL, wslen);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    ::MultiByteToWideChar(CP_ACP, 0 <span class="comment">/* no flags */</span>,</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        str.data(), str.length(),</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        wsdata, wslen);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">return</span> wsdata;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;}</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="tcpip__headers_8hpp_xhtml_a03283e6460404e870cdcc56e57394e43"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a03283e6460404e870cdcc56e57394e43">IPv4_ADDRLEN</a></div><div class="ttdeci">#define IPv4_ADDRLEN</div><div class="ttdoc">Length of IPv4 address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00061">tcpip_headers.hpp:61</a></div></div>
<div class="ttc" id="namespace_n_a_m_o_n_xhtml"><div class="ttname"><a href="namespace_n_a_m_o_n.xhtml">NAMON</a></div><div class="ttdef"><b>Definition:</b> <a href="cache_8cpp_source.xhtml#l00037">cache.cpp:37</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml"><div class="ttname"><a href="debug_8hpp.xhtml">debug.hpp</a></div><div class="ttdoc">Debugging functions. </div></div>
<div class="ttc" id="debug_8hpp_xhtml_a9f1c1527f51faaaca3be83b5a8928ca5"><div class="ttname"><a href="debug_8hpp.xhtml#a9f1c1527f51faaaca3be83b5a8928ca5">NAMON::log</a></div><div class="ttdeci">void log(LogLevel ll, Ts &amp;&amp;... args)</div><div class="ttdoc">Function that prints log messages. </div><div class="ttdef"><b>Definition:</b> <a href="debug_8hpp_source.xhtml#l00070">debug.hpp:70</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div><div class="ttdoc">Small useful functions header file. </div></div>
<div class="ttc" id="utils_8cpp_xhtml_ae2e90146442e37ba0216dbb0ac0f6688"><div class="ttname"><a href="utils_8cpp.xhtml#ae2e90146442e37ba0216dbb0ac0f6688">NAMON::inet_ntop4</a></div><div class="ttdeci">int inet_ntop4(const void *src, char *dst, size_t size)</div><div class="ttdef"><b>Definition:</b> <a href="utils_8cpp_source.xhtml#l00043">utils.cpp:43</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a></div><div class="ttdoc">Protocol headers. </div></div>
<div class="ttc" id="utils_8cpp_xhtml_ab5404d89c33dfee3caf9d6e2879bd9b1"><div class="ttname"><a href="utils_8cpp.xhtml#ab5404d89c33dfee3caf9d6e2879bd9b1">NAMON::chToInt</a></div><div class="ttdeci">int chToInt(char *str, int &amp;res)</div><div class="ttdoc">Converts char* string to integer. </div><div class="ttdef"><b>Definition:</b> <a href="utils_8cpp_source.xhtml#l00030">utils.cpp:30</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a180abd840f2fad8dfd4f33f7e8467b67"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a180abd840f2fad8dfd4f33f7e8467b67">IPv6_ADDRLEN</a></div><div class="ttdeci">#define IPv6_ADDRLEN</div><div class="ttdoc">Length of IPv6 address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00105">tcpip_headers.hpp:105</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_aa6201c439f1158407165ee382b5e2df4"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#aa6201c439f1158407165ee382b5e2df4">IPv4_ADDRSTRLEN</a></div><div class="ttdeci">#define IPv4_ADDRSTRLEN</div><div class="ttdoc">Length of IPv4 address string. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00060">tcpip_headers.hpp:60</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="utils_8cpp.xhtml">utils.cpp</a></li>
    <li class="footer">Generated on Fri Jun 23 2017 13:03:10 for Network Traffic Capture With Application Tags by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
