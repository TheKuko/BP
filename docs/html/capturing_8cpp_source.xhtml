<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Network Traffic Capture With Application Tags: src/capturing.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Network Traffic Capture With Application Tags
   </div>
   <div id="projectbrief">Bachelor&#39;s Thesis, FIT VUT</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('capturing_8cpp_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">capturing.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="capturing_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span>                  <span class="comment">//  map</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;pcap.h&gt;</span>               <span class="comment">//  pcap_lookupdev(), pcap_open_live(), pcap_dispatch(), pcap_close()</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;thread&gt;</span>               <span class="comment">//  thread</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;atomic&gt;</span>               <span class="comment">//  atomic::store()</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#if defined(__linux__)</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;signal.h&gt;</span>             <span class="comment">//  signal(), SIGINT, SIGTERM, SIGABRT, SIGSEGV</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tool__linux_8hpp.xhtml">tool_linux.hpp</a>&quot;</span>       <span class="comment">//  setDevMac()</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#elif defined(__APPLE__)</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tool__apple_8hpp.xhtml">tool_apple.hpp</a>&quot;</span>       <span class="comment">//  setDevMac()</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#elif defined(_WIN32)</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">//#include &lt;Windows.h&gt;          //  SetConsoleCtrlHandler()</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#include &lt;signal.h&gt;</span>         <span class="comment">//  signal()</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tool__win_8hpp.xhtml">tool_win.hpp</a>&quot;</span>         <span class="comment">//  setDevMac()</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a>&quot;</span>    <span class="comment">//  </span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="file_handler_8hpp.xhtml">fileHandler.hpp</a>&quot;</span>      <span class="comment">//  initOFile()</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="ring_buffer_8hpp.xhtml">ringBuffer.hpp</a>&quot;</span>       <span class="comment">//  RingBuffer</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="cache_8hpp.xhtml">cache.hpp</a>&quot;</span>            <span class="comment">//  TEntryOrTTree</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="netflow_8hpp.xhtml">netflow.hpp</a>&quot;</span>          <span class="comment">//  Netflow</span></div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="debug_8hpp.xhtml">debug.hpp</a>&quot;</span>            <span class="comment">//  D(), log()</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="utils_8hpp.xhtml">utils.hpp</a>&quot;</span>            <span class="comment">//  </span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="capturing_8hpp.xhtml">capturing.hpp</a>&quot;</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#if defined(_WIN32)</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#pragma comment(lib, &quot;Packet.lib&quot;)</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="preprocessor">#pragma comment(lib, &quot;wpcap.lib&quot;)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">//#pragma comment(lib, &quot;Ws2_32.lib&quot;)    //  ntohs()</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">using namespace </span><a class="code" href="namespace_t_o_o_l.xhtml">TOOL</a>;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#ac57265207f75eaf6768bf4bfade3a9f9">   80</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      <a class="code" href="capturing_8cpp.xhtml#ac57265207f75eaf6768bf4bfade3a9f9">FILE_RING_BUFFER_SIZE</a>   = 2000;   </div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#ae4bf63d759e297a812a6d197daad6006">   81</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      <a class="code" href="capturing_8cpp.xhtml#ae4bf63d759e297a812a6d197daad6006">CACHE_RING_BUFFER_SIZE</a>  = 2000;   </div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#afe2c1f981169f285ab188d1fbb6c6996">   82</a></span>&#160;<span class="keyword">const</span> <a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a>          <a class="code" href="capturing_8cpp.xhtml#afe2c1f981169f285ab188d1fbb6c6996">g_macMcast4</a>             { { 0x01,0x00,0x5e } };                 </div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#a558e8af914d980beef4e071458d452cb">   83</a></span>&#160;<span class="keyword">const</span> <a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a>          <a class="code" href="capturing_8cpp.xhtml#a558e8af914d980beef4e071458d452cb">g_macMcast6</a>             { { 0x33,0x33 } };                      </div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#ac5e8774a93b1990be25926da6a65bd69">   84</a></span>&#160;<span class="keyword">const</span> <a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a>          <a class="code" href="capturing_8cpp.xhtml#ac5e8774a93b1990be25926da6a65bd69">g_macBcast</a>              { { 0xff,0xff,0xff,0xff,0xff,0xff } };  </div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="tool_8cpp.xhtml#a3c04900274fa10d4d732504f355f2d90">   86</a></span>&#160;map&lt;string, vector&lt;Netflow *&gt;&gt; <a class="code" href="capturing_8cpp.xhtml#a19863254fb16f3b3e521e8b885094a72">g_finalResults</a>;          </div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">   87</a></span>&#160;pcap_t *<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>            = <span class="keyword">nullptr</span>;              </div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="tool__win_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">   88</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span> * <a class="code" href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>              = <span class="keyword">nullptr</span>;              </div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="tool__win_8cpp.xhtml#a2a4595f71a05150f24c3e71423309414">   89</a></span>&#160;<a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a> <a class="code" href="capturing_8cpp.xhtml#ac153ac5aaa5d92003087c83de954c9fc">g_devMac</a>               { {0} };                </div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">   90</a></span>&#160;ofstream <a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>;                                         </div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="ring_buffer_8hpp.xhtml#a2ffea55679b0ec51f39923a8fb4754e0">   91</a></span>&#160;atomic&lt;int&gt; <a class="code" href="capturing_8cpp.xhtml#a501adfad2e1a90a240e96a1dbb62cafc">shouldStop</a>          { <span class="keyword">false</span> };              </div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="capturing_8cpp.xhtml#a376082230cb4e203752490d95aebe041">   92</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#a376082230cb4e203752490d95aebe041">rcvdPackets</a>        = 0;                    </div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="tool_8cpp.xhtml#abdf9d4cab1c87115d4b3c1e3c0a8779a">   93</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#abdf9d4cab1c87115d4b3c1e3c0a8779a">g_allSockets</a>       = 0;                    </div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="tool_8cpp.xhtml#aac0aba99c3eda1c02b40141750620ae7">   94</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#aac0aba99c3eda1c02b40141750620ae7">g_notFoundSockets</a>  = 0;                    </div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="tool__linux_8cpp.xhtml#a6fcedd7165126a470d02412573dea7c3">   95</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#a6fcedd7165126a470d02412573dea7c3">g_notFoundApps</a>     = 0;                    </div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a796d8f82917739002736e8d61c6fb635">   99</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#a796d8f82917739002736e8d61c6fb635">startCapture</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *oFilename)</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="preprocessor">#if 0 //def _WIN32</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    SetConsoleCtrlHandler((PHANDLER_ROUTINE)<a class="code" href="capturing_8cpp.xhtml#a8ee3282bc313e547dbbb8d4f4010db61">signalHandler</a>, TRUE);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    signal(SIGINT, signalHandler);      signal(SIGTERM, signalHandler);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    signal(SIGABRT, signalHandler);     signal(SIGSEGV, signalHandler);</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordtype">char</span> errbuf[<a class="code" href="capturing_8hpp.xhtml#acd448353957d92c98fccc29e1fc8d927">PCAP_ERRBUF_SIZE</a>];</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">try</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment">// if the interface wasn&#39;t specified by user open the first active one</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="comment">//if (g_dev == nullptr &amp;&amp; (g_dev = pcap_lookupdev(errbuf)) == nullptr)</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="comment">//  throw pcap_ex(&quot;Can&#39;t open input device.&quot;, errbuf);</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        pcap_if_t *alldevs, *d;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        u_int inum, i = 0;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="comment">/* The user didn&#39;t provide a packet source: Retrieve the device list */</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a> == <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        {</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">if</span> (pcap_findalldevs(&amp;alldevs, errbuf) == -1)</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">throw</span> <a class="code" href="structpcap__ex.xhtml">pcap_ex</a>(<span class="stringliteral">&quot;Can&#39;t open input device.&quot;</span>, errbuf);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="comment">/* Print the list */</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">for</span> (d = alldevs; d; d = d-&gt;next)</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                cout &lt;&lt; ++i &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; d-&gt;name &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                cout &lt;&lt; (d-&gt;description ? d-&gt;description : <span class="stringliteral">&quot;(No description available)&quot;</span>) &lt;&lt; endl;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">if</span> (i == 0)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                <span class="keywordflow">throw</span> <span class="stringliteral">&quot;No interfaces found! Make sure npcap/libpcap is installed and you have permission to capture packets.&quot;</span>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            cout &lt;&lt; <span class="stringliteral">&quot;Enter the interface number (1-&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;): &quot;</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            cin &gt;&gt; inum;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">if</span> (inum &lt; 1 || inum &gt; i)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Interface number out of range.&quot;</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            <span class="comment">/* Jump to the selected adapter */</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">for</span> (d = alldevs, i = 0; i &lt; inum-1; d = d-&gt;next, i++)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                ;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <a class="code" href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a> = d-&gt;name;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment">// get interface MAC address</span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="tool__apple_8cpp.xhtml#abffa8d5a00da5ef52e025864e1b86829">setDevMac</a>())</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Can&#39;t get interface MAC address.&quot;</span>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        </div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">// Open the output file</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        <a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>.open(oFilename, ios::binary);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> (!<a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>)</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">throw</span> (<span class="stringliteral">&quot;Can&#39;t open output file: &#39;&quot;</span> + <span class="keywordtype">string</span>(oFilename) + <span class="stringliteral">&quot;&#39;&quot;</span>).c_str();</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::INFO, <span class="stringliteral">&quot;Output file &#39;&quot;</span>, oFilename, <span class="stringliteral">&quot;&#39; was opened.&quot;</span>);</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        <span class="comment">// Write Section Header Block and Interface Description Block to the output file</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="file_handler_8cpp.xhtml#a9fb5f617541ea7938831450d69157f60">initOFile</a>(<a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>))</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Output file initialization error.&quot;</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">#if defined(_WIN32)</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> (connectToWmi())</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">throw</span> <span class="stringliteral">&quot;Connection to WMI failed&quot;</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span> ((<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a> = pcap_open_live(<a class="code" href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>, BUFSIZ, <span class="keyword">false</span>, 1000, errbuf)) == NULL)</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">throw</span> <a class="code" href="structpcap__ex.xhtml">pcap_ex</a>(<span class="stringliteral">&quot;pcap_open_live() failed.&quot;</span>, errbuf);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="comment">//Aif (pcap_setnonblock(g_pcapHandle, 1, errbuf) == -1)</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="comment">//A throw pcap_ex(&quot;pcap_setnonblock() failed.&quot;, errbuf);</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::INFO, <span class="stringliteral">&quot;Capturing device &#39;&quot;</span>, <a class="code" href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a>, <span class="stringliteral">&quot;&#39; was opened.&quot;</span>);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="comment">// Create ring buffer and run writing to file in a new thread</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml">RingBuffer&lt;EnhancedPacketBlock&gt;</a> fileBuffer(<a class="code" href="capturing_8cpp.xhtml#ac57265207f75eaf6768bf4bfade3a9f9">FILE_RING_BUFFER_SIZE</a>);</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        thread t1([&amp;fileBuffer]() { fileBuffer.<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#af824b93f12c5454587cc8f2d77a780f7">write</a>(<a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>); });</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <a class="code" href="class_t_o_o_l_1_1_cache.xhtml">Cache</a> cache;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml">RingBuffer&lt;Netflow&gt;</a> cacheBuffer(<a class="code" href="capturing_8cpp.xhtml#ae4bf63d759e297a812a6d197daad6006">CACHE_RING_BUFFER_SIZE</a>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">/*X*/</span>thread t2([&amp;cacheBuffer, &amp;cache]() { cacheBuffer.<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#af8af96370fa0518ec0b601bdbddb4197">run</a>(&amp;cache); });</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <a class="code" href="struct_packet_handler_params.xhtml">PacketHandlerParams</a> ptrs{ &amp;fileBuffer, &amp;cacheBuffer };</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        </div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::INFO, <span class="stringliteral">&quot;Capturing...&quot;</span>);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment">//Awhile (!shouldStop)</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="comment">//A    pcap_dispatch(handle, -1, packetHandler, reinterpret_cast&lt;u_char*&gt;(&amp;ptrs));</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordflow">if</span> (pcap_loop(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>, -1, <a class="code" href="capturing_8cpp.xhtml#a4ac8ead1a5241b4d5218575215f1b34c">packetHandler</a>, reinterpret_cast&lt;u_char*&gt;(&amp;ptrs)) == -1)</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            <span class="keywordflow">throw</span> <span class="stringliteral">&quot;pcap_loop() failed&quot;</span>; </div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keyword">struct </span>pcap_stat stats;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        pcap_stats(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>, &amp;stats);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        pcap_close(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>);</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::INFO, <span class="stringliteral">&quot;Waiting for threads to finish.&quot;</span>);</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        this_thread::sleep_for(chrono::seconds(1)); <span class="comment">// because of possible deadlock, get some time to return from RingBuffer::receivedPacket() to condVar.wait()</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        fileBuffer.<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#ac221ed54e26909d2296aec6415bf9b65">notifyCondVar</a>(); <span class="comment">// notify thread, it should end</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">/*X*/</span>cacheBuffer.notifyCondVar(); <span class="comment">// notify thread, it should end</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="comment">/*X*/</span>t2.join();</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        t1.join();</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">#if defined(_WIN32)</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        cleanWmiConnection();</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="comment">/*X*/</span>cache.saveResults();</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        <span class="comment">/*X*/</span><a class="code" href="class_t_o_o_l_1_1_custom_block.xhtml">CustomBlock</a> cBlock;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        <span class="comment">/*X*/</span>cBlock.<a class="code" href="class_t_o_o_l_1_1_custom_block.xhtml#aef9b0da921b7014d415c3afc4b2f3dab">write</a>(<a class="code" href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a>); </div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="comment">/******* SUMMARY *******/</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        cout &lt;&lt; fileBuffer.<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#a24d1db9b6bebde32dfe3f0c3d36bc118">getDroppedElem</a>() &lt;&lt; <span class="stringliteral">&quot;&#39; packets dropped by fileBuffer.&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        cout &lt;&lt; cacheBuffer.getDroppedElem() &lt;&lt; <span class="stringliteral">&quot;&#39; packets dropped by cacheBuffer.&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        cout &lt;&lt; stats.ps_drop &lt;&lt; <span class="stringliteral">&quot;&#39; packets dropped by the driver.&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">#ifdef DEBUG_BUILD</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Total &quot;</span> &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#a376082230cb4e203752490d95aebe041">rcvdPackets</a> &lt;&lt; <span class="stringliteral">&quot; packets received.\n&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Total &quot;</span> &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#a19863254fb16f3b3e521e8b885094a72">g_finalResults</a>.size() &lt;&lt; <span class="stringliteral">&quot; records with exactly the same 3-tuple&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Inode not found for &quot;</span> &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#aac0aba99c3eda1c02b40141750620ae7">g_notFoundSockets</a> &lt;&lt; <span class="stringliteral">&quot; ports from &quot;</span> &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#abdf9d4cab1c87115d4b3c1e3c0a8779a">g_allSockets</a> &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Application not found for &quot;</span> &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#a6fcedd7165126a470d02412573dea7c3">g_notFoundApps</a> &lt;&lt; <span class="stringliteral">&quot; inodes.&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        cout &lt;&lt; <a class="code" href="capturing_8cpp.xhtml#a19863254fb16f3b3e521e8b885094a72">g_finalResults</a>.size() &lt;&lt; <span class="stringliteral">&quot; applications in total:&quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">for</span> (<span class="keyword">auto</span> record : <a class="code" href="capturing_8cpp.xhtml#a19863254fb16f3b3e521e8b885094a72">g_finalResults</a>)</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            cout &lt;&lt; <span class="stringliteral">&quot;  * &quot;</span> &lt;&lt; record.first &lt;&lt; endl;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            <span class="keywordflow">for</span> (<span class="keyword">auto</span> entry : record.second)</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                <span class="keyword">delete</span> entry;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Cache records: &quot;</span> &lt;&lt; endl;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        cache.print();</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">#ifdef _WIN32</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">if</span> (cin.fail())</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        {</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            cin.clear();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            cin.ignore(INT_MAX, <span class="charliteral">&#39;\n&#39;</span>); <span class="comment">//INT_MAX is used instead of numeric_limits&lt;streamsize&gt;::max because of max() define in minwindef.h</span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        cout &lt;&lt; <span class="stringliteral">&quot;Enter any symbol to exit...&quot;</span>;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordtype">int</span> x;</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        cin &gt;&gt; x;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">catch</span> (<a class="code" href="structpcap__ex.xhtml">pcap_ex</a> &amp;e)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    {</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: &quot;</span> &lt;&lt; e.what() &lt;&lt; endl;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>)</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            pcap_close(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    }</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">catch</span> (<span class="keyword">const</span> <span class="keywordtype">char</span> *msg)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        cerr &lt;&lt; <span class="stringliteral">&quot;ERROR: &quot;</span> &lt;&lt; msg &lt;&lt; endl;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>)</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            pcap_close(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="capturing_8cpp.xhtml#a501adfad2e1a90a240e96a1dbb62cafc">shouldStop</a>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a5b519a162338237e3935db3c8a3f8638">  255</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="capturing_8cpp.xhtml#a4ac8ead1a5241b4d5218575215f1b34c">packetHandler</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *arg_array, <span class="keyword">const</span> <span class="keyword">struct</span> pcap_pkthdr *header, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> *packet)</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;{</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">static</span> <a class="code" href="class_t_o_o_l_1_1_netflow.xhtml">Netflow</a> n;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ip_hdrlen;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keyword">static</span> <a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml">ether_hdr</a> *eth_hdr;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <a class="code" href="struct_packet_handler_params.xhtml">PacketHandlerParams</a> *ptrs = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="struct_packet_handler_params.xhtml">PacketHandlerParams</a>*<span class="keyword">&gt;</span>(arg_array);</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml">RingBuffer&lt;Netflow&gt;</a> *cb = ptrs-&gt;<a class="code" href="struct_packet_handler_params.xhtml#a5a2b474680148b409795968bf797a529">cacheBuffer</a>;</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml">RingBuffer&lt;EnhancedPacketBlock&gt;</a> *rb = ptrs-&gt;<a class="code" href="struct_packet_handler_params.xhtml#a86fe14679b96ab04dae7961cf51c17a2">fileBuffer</a>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    eth_hdr = (<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml">ether_hdr</a>*)packet;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <a class="code" href="capturing_8cpp.xhtml#a376082230cb4e203752490d95aebe041">rcvdPackets</a>++;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">if</span> (rb-&gt;<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#afe1bfc1344659d31ec56627448aebfea">push</a>(header, packet))</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    {</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::ERR, <span class="stringliteral">&quot;Packet dropped because of slow hard drive.&quot;</span>);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="keywordflow">return</span>; </div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="comment">// We can&#39;t determine app for IGMP, ICMP, etc. https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span>    <span class="keywordflow">if</span> (eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a61466a05fe1a3988bf4bcf5fad2a18f7">ether_type</a> != <a class="code" href="tcpip__headers_8hpp.xhtml#a57f054682241948550cf310a78b1b787">PROTO_IPv4</a> &amp;&amp; eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a61466a05fe1a3988bf4bcf5fad2a18f7">ether_type</a> != <a class="code" href="tcpip__headers_8hpp.xhtml#a4764dc43b99fcd72e7d2ce7be93df2a5">PROTO_IPv6</a>)</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    uint64_t usecUnixTime = header-&gt;ts.tv_sec * (uint64_t)1000000 + header-&gt;ts.tv_usec;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a2ee52fc7de1b3edf32d42b3672832b9e">setStartTime</a>(usecUnixTime);</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a605c07e74f3e6dac46a4c075bbc8bacc">setEndTime</a>(usecUnixTime);</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5">Directions</a> dir = <a class="code" href="capturing_8cpp.xhtml#a2d1caabab7793c2cb4eb96863da5299a">getPacketDirection</a>(eth_hdr);</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">if</span> (dir == <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5a696b031073e74bf2cb98e5ef201d4aa3">Directions::UNKNOWN</a>)</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="comment">// Parse IP header</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="capturing_8cpp.xhtml#a8fd309d5e9252e6de3b1bea1802e8453">parseIp</a>(n, ip_hdrlen, dir, (<span class="keywordtype">void</span>*)(packet + <a class="code" href="tcpip__headers_8hpp.xhtml#a4491832e10227e3f3b6116fe1eada74c">ETHER_HDRLEN</a>), eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a61466a05fe1a3988bf4bcf5fad2a18f7">ether_type</a>))</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// Parse transport layer header</span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="capturing_8cpp.xhtml#a30a4aa41a243aeb1e88c49d09e65a48e">parsePorts</a>(n, dir, (<span class="keywordtype">void</span>*)(packet + <a class="code" href="tcpip__headers_8hpp.xhtml#a4491832e10227e3f3b6116fe1eada74c">ETHER_HDRLEN</a> + ip_hdrlen)))</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="comment">//      if (n.getIpVersion() == 4)</span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="comment">//          delete static_cast&lt;ip4_addr*&gt;(n.getLocalIp());</span></div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">//      else</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="comment">//          delete static_cast&lt;ip6_addr*&gt;(n.getLocalIp());</span></div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="comment">// STD::MOVE Netflow into buffer</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="comment">/*X*/</span><span class="keywordflow">if</span> (cb-&gt;<a class="code" href="class_t_o_o_l_1_1_ring_buffer.xhtml#afe1bfc1344659d31ec56627448aebfea">push</a>(n))</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="comment">/*X*/</span>{</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="comment">/*X*/</span>   <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::ERR, <span class="stringliteral">&quot;Packet dropped because cache is too slow.&quot;</span>);</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">/*X*/</span>   <span class="keywordflow">return</span>;</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="comment">/*X*/</span>}</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a66d66c5f9a4235b784cbae69bcfefbd1">  306</a></span>&#160;<a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5">Directions</a> <a class="code" href="capturing_8cpp.xhtml#a2d1caabab7793c2cb4eb96863da5299a">getPacketDirection</a>(<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml">ether_hdr</a> *eth_hdr)</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">if</span> (memcmp(&amp;<a class="code" href="capturing_8cpp.xhtml#ac153ac5aaa5d92003087c83de954c9fc">g_devMac</a>, eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a8a6a25404e8986de198acb0aeb81c019">ether_shost</a>, <span class="keyword">sizeof</span>(<a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a>)) == 0)</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5a25831eea29609bc6ae3b24eca13dd682">Directions::OUTBOUND</a>;</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (memcmp(&amp;<a class="code" href="capturing_8cpp.xhtml#ac153ac5aaa5d92003087c83de954c9fc">g_devMac</a>, eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">ether_dhost</a>, <span class="keyword">sizeof</span>(<a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml">mac_addr</a>)) == 0)</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="comment">// else compare multicast and broadcast address</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="comment">// we don&#39;t have have to compare second part of the mac address</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// because we don&#39;t capture in promiscuous mode so we won&#39;t receive</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    <span class="comment">// multicast packet with not our second part the of mac address</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// multicast/broadcast as destination == INBOUND</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (memcmp(&amp;<a class="code" href="capturing_8cpp.xhtml#afe2c1f981169f285ab188d1fbb6c6996">g_macMcast4</a>, eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">ether_dhost</a>, 3) == 0</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        || memcmp(&amp;<a class="code" href="capturing_8cpp.xhtml#a558e8af914d980beef4e071458d452cb">g_macMcast6</a>, eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">ether_dhost</a>, 2) == 0</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        || memcmp(&amp;<a class="code" href="capturing_8cpp.xhtml#ac5e8774a93b1990be25926da6a65bd69">g_macBcast</a>, eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">ether_dhost</a>, 6) == 0)</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="comment">// multicast/broadcast as source IP is not valid</span></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a74021f021dcdfbb22891787b79c5529d">D</a>(<span class="stringliteral">&quot;int vs. src vs. dst&quot;</span>);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a887f9c58a59831ccccb32a4354ee80d3">D_ARRAY</a>((<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>*)&amp;<a class="code" href="capturing_8cpp.xhtml#ac153ac5aaa5d92003087c83de954c9fc">g_devMac</a>.<a class="code" href="struct_t_o_o_l_1_1mac__addr.xhtml#a300953da210b9b54c4b8dbc73d650f3f">bytes</a>, 6);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a887f9c58a59831ccccb32a4354ee80d3">D_ARRAY</a>(eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a8a6a25404e8986de198acb0aeb81c019">ether_shost</a>, 6);</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a887f9c58a59831ccccb32a4354ee80d3">D_ARRAY</a>(eth_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">ether_dhost</a>, 6);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::ERR, <span class="stringliteral">&quot;Can&#39;t determine packet direction.&quot;</span>);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5a696b031073e74bf2cb98e5ef201d4aa3">Directions::UNKNOWN</a>;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a8fd309d5e9252e6de3b1bea1802e8453">  332</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#a8fd309d5e9252e6de3b1bea1802e8453">parseIp</a>(<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml">Netflow</a> &amp;n, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> &amp;ip_size, <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5">Directions</a> dir, <span class="keywordtype">void</span> * <span class="keyword">const</span> ip_hdr, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> ether_type)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keywordflow">if</span> (ether_type == <a class="code" href="tcpip__headers_8hpp.xhtml#a57f054682241948550cf310a78b1b787">PROTO_IPv4</a>)</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    {</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keyword">const</span> <a class="code" href="struct_t_o_o_l_1_1ip4__hdr.xhtml">ip4_hdr</a> * <span class="keyword">const</span> hdr = (<a class="code" href="struct_t_o_o_l_1_1ip4__hdr.xhtml">ip4_hdr</a>*)ip_hdr;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        ip_size = hdr-&gt;ihl * 4; <span class="comment">// the length of the internet header in 32 bit words</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">if</span> (ip_size &lt; 20)</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        {</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::WARNING, <span class="stringliteral">&quot;Incorrect IPv4 header received.&quot;</span>);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml">ip4_addr</a>* tmpIpPtr = <span class="keyword">new</span> <a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml">ip4_addr</a>;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">if</span> (dir == <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>)</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            tmpIpPtr-&gt;<a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml#ac979b727fc4a200df70f0701a5410edf">addr</a> = hdr-&gt;ip_dst.<a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml#ac979b727fc4a200df70f0701a5410edf">addr</a>;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            tmpIpPtr-&gt;<a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml#ac979b727fc4a200df70f0701a5410edf">addr</a> = hdr-&gt;ip_src.<a class="code" href="struct_t_o_o_l_1_1ip4__addr.xhtml#ac979b727fc4a200df70f0701a5410edf">addr</a>;</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        </div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a6769d8516457a0630af50fbc519bc3d5">setLocalIp</a>((<span class="keywordtype">void</span>*)(tmpIpPtr));</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a471ec0e1c1c39f3a9b16576769114cf7">setIpVersion</a>(4);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a5a20ac76ee3bbcb4a4bb74ba1a5ac218">setProto</a>(hdr-&gt;ip_p);</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    {</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keyword">const</span> <a class="code" href="struct_t_o_o_l_1_1ip6__hdr.xhtml">ip6_hdr</a> * <span class="keyword">const</span> hdr = (<a class="code" href="struct_t_o_o_l_1_1ip6__hdr.xhtml">ip6_hdr</a>*)ip_hdr;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        ip_size = <a class="code" href="tcpip__headers_8hpp.xhtml#a2cfdfb5c6f4dff163ab8ea770d47593f">IPv6_HDRLEN</a>;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <a class="code" href="struct_t_o_o_l_1_1ip6__addr.xhtml">ip6_addr</a>* tmpIpPtr = <span class="keyword">new</span> <a class="code" href="struct_t_o_o_l_1_1ip6__addr.xhtml">ip6_addr</a>;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">if</span> (dir == <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>)</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            memcpy(tmpIpPtr, &amp;hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ip6__hdr.xhtml#ab2b7c707351b08765c8baaf72f496896">ip6_dst</a>, <span class="keyword">sizeof</span>(<a class="code" href="struct_t_o_o_l_1_1ip6__addr.xhtml">ip6_addr</a>));</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">else</span></div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            memcpy(tmpIpPtr, &amp;hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1ip6__hdr.xhtml#abd3150ff5e53216dd43d1292cb8e8dc1">ip6_src</a>, <span class="keyword">sizeof</span>(<a class="code" href="struct_t_o_o_l_1_1ip6__addr.xhtml">ip6_addr</a>));</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a6769d8516457a0630af50fbc519bc3d5">setLocalIp</a>((<span class="keywordtype">void</span>*)(tmpIpPtr));</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a471ec0e1c1c39f3a9b16576769114cf7">setIpVersion</a>(6);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a5a20ac76ee3bbcb4a4bb74ba1a5ac218">setProto</a>(hdr-&gt;ip6_nxt);</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;}</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a30a4aa41a243aeb1e88c49d09e65a48e">  374</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="capturing_8cpp.xhtml#a30a4aa41a243aeb1e88c49d09e65a48e">parsePorts</a>(<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml">Netflow</a> &amp;n, <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5">Directions</a> dir, <span class="keywordtype">void</span> *hdr)</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">switch</span> (n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a90e60833b8662f06ca181452aafaa27e">getProto</a>())</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    {</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="tcpip__headers_8hpp.xhtml#a9ffdcf7d5e586cacd1d48afe7af9505f">PROTO_TCP</a>:</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        {</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="struct_t_o_o_l_1_1tcp__hdr.xhtml">tcp_hdr</a> *<a class="code" href="struct_t_o_o_l_1_1tcp__hdr.xhtml">tcp_hdr</a> = (<span class="keyword">struct </span>tcp_hdr*)hdr;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;            <span class="keywordtype">unsigned</span> tcp_size = tcp_hdr-&gt;th_off * 4; <span class="comment">// number of 32 bit words in the TCP header</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            <span class="keywordflow">if</span> (tcp_size &lt; 20)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::WARNING, <span class="stringliteral">&quot;Incorrect TCP header received.&quot;</span>);</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            }</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">if</span> (dir == <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#ac2c1e2b89f875cf0cedf409166482463">setLocalPort</a>(TOOL::ntohs(tcp_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1tcp__hdr.xhtml#a8269a35eb101628cc397b72757891454">th_dport</a>));</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#ac2c1e2b89f875cf0cedf409166482463">setLocalPort</a>(TOOL::ntohs(tcp_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1tcp__hdr.xhtml#af8f5e8e7e0555a7e1f2d1b072e550096">th_sport</a>));</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        }</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="tcpip__headers_8hpp.xhtml#a811a9c0dd5d4b0f0bb5848e764d91017">PROTO_UDP</a>:</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="tcpip__headers_8hpp.xhtml#a8a613c50d4b87e140b5006e66872c476">PROTO_UDPLITE</a>: <span class="comment">// structure of first 4 bytes is the same (srcPort and dstPort)</span></div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        {</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            <span class="keyword">const</span> <span class="keyword">struct </span><a class="code" href="struct_t_o_o_l_1_1udp__hdr.xhtml">udp_hdr</a> *<a class="code" href="struct_t_o_o_l_1_1udp__hdr.xhtml">udp_hdr</a> = (<span class="keyword">struct </span>udp_hdr*)hdr;</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> udp_size = udp_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1udp__hdr.xhtml#a12d81a0098313941d65c8a30920faff7">uh_ulen</a>; <span class="comment">// length in bytes of the UDP header and UDP data</span></div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">if</span> (udp_size &lt; 8)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;            {</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::WARNING, <span class="stringliteral">&quot;Incorrect UDP packet received with size &lt;&quot;</span>, udp_size, <span class="stringliteral">&quot;&gt;&quot;</span>);</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;            }</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="keywordflow">if</span> (dir == <a class="code" href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a>)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#ac2c1e2b89f875cf0cedf409166482463">setLocalPort</a>(TOOL::ntohs(udp_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1udp__hdr.xhtml#a9066c5a6a039ee52cbdf76c091aa1187">uh_dport</a>));</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">else</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#ac2c1e2b89f875cf0cedf409166482463">setLocalPort</a>(TOOL::ntohs(udp_hdr-&gt;<a class="code" href="struct_t_o_o_l_1_1udp__hdr.xhtml#a3bbdce1e986dc0c2c329cc6ad11571da">uh_sport</a>));</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">break</span>;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        }</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        {</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::WARNING, <span class="stringliteral">&quot;Unsupported transport layer protocol (&quot;</span>, (<span class="keywordtype">int</span>)n.<a class="code" href="class_t_o_o_l_1_1_netflow.xhtml#a90e60833b8662f06ca181452aafaa27e">getProto</a>(), <span class="stringliteral">&quot;)&quot;</span>);</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="keywordflow">return</span> EXIT_FAILURE;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        }</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">return</span> EXIT_SUCCESS;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;</div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="capturing_8hpp.xhtml#a8ee3282bc313e547dbbb8d4f4010db61">  419</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="capturing_8cpp.xhtml#a8ee3282bc313e547dbbb8d4f4010db61">signalHandler</a>(<span class="keywordtype">int</span> signum)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;{</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <a class="code" href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">log</a>(LogLevel::WARNING, <span class="stringliteral">&quot;Interrupt signal (&quot;</span>, signum, <span class="stringliteral">&quot;) received.&quot;</span>);</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>)  pcap_breakloop(<a class="code" href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a>);</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <a class="code" href="capturing_8cpp.xhtml#a501adfad2e1a90a240e96a1dbb62cafc">shouldStop</a>.store(signum);</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;}</div><div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a471ec0e1c1c39f3a9b16576769114cf7"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a471ec0e1c1c39f3a9b16576769114cf7">TOOL::Netflow::setIpVersion</a></div><div class="ttdeci">void setIpVersion(uint8_t ipV)</div><div class="ttdoc">Set method for TOOL::Netflow::ipVersion. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00062">netflow.hpp:62</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip4__addr_xhtml_ac979b727fc4a200df70f0701a5410edf"><div class="ttname"><a href="struct_t_o_o_l_1_1ip4__addr.xhtml#ac979b727fc4a200df70f0701a5410edf">TOOL::ip4_addr::addr</a></div><div class="ttdeci">uint32_t addr</div><div class="ttdoc">IPv4 address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00066">tcpip_headers.hpp:66</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_ac153ac5aaa5d92003087c83de954c9fc"><div class="ttname"><a href="capturing_8cpp.xhtml#ac153ac5aaa5d92003087c83de954c9fc">g_devMac</a></div><div class="ttdeci">mac_addr g_devMac</div><div class="ttdoc">Capturing device MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00089">capturing.cpp:89</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a8fd309d5e9252e6de3b1bea1802e8453"><div class="ttname"><a href="capturing_8cpp.xhtml#a8fd309d5e9252e6de3b1bea1802e8453">parseIp</a></div><div class="ttdeci">int parseIp(Netflow &amp;n, unsigned int &amp;ip_size, Directions dir, void *const ip_hdr, const unsigned short ether_type)</div><div class="ttdoc">Parses IP header. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00332">capturing.cpp:332</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1udp__hdr_xhtml_a3bbdce1e986dc0c2c329cc6ad11571da"><div class="ttname"><a href="struct_t_o_o_l_1_1udp__hdr.xhtml#a3bbdce1e986dc0c2c329cc6ad11571da">TOOL::udp_hdr::uh_sport</a></div><div class="ttdeci">uint16_t uh_sport</div><div class="ttdoc">source port </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00158">tcpip_headers.hpp:158</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a501adfad2e1a90a240e96a1dbb62cafc"><div class="ttname"><a href="capturing_8cpp.xhtml#a501adfad2e1a90a240e96a1dbb62cafc">shouldStop</a></div><div class="ttdeci">atomic&lt; int &gt; shouldStop</div><div class="ttdoc">Variable which is set if program should stop. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00091">capturing.cpp:91</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a42d19071ba4a8b8cfec455beb9fc9544"><div class="ttname"><a href="capturing_8cpp.xhtml#a42d19071ba4a8b8cfec455beb9fc9544">oFile</a></div><div class="ttdeci">ofstream oFile</div><div class="ttdoc">Output file stream. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00090">capturing.cpp:90</a></div></div>
<div class="ttc" id="capturing_8hpp_xhtml_a04f362029ec2a624fbcb7a30b20ff5f5"><div class="ttname"><a href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5">Directions</a></div><div class="ttdeci">Directions</div><div class="ttdoc">An enum representing packet flow direction. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00042">capturing.hpp:42</a></div></div>
<div class="ttc" id="tool__apple_8hpp_xhtml"><div class="ttname"><a href="tool__apple_8hpp.xhtml">tool_apple.hpp</a></div><div class="ttdoc">Determining applications and their sockets on macOS. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a2ee52fc7de1b3edf32d42b3672832b9e"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a2ee52fc7de1b3edf32d42b3672832b9e">TOOL::Netflow::setStartTime</a></div><div class="ttdeci">void setStartTime(uint64_t newTime)</div><div class="ttdoc">Set method for TOOL::Netflow::startTime. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00105">netflow.hpp:105</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a5a20ac76ee3bbcb4a4bb74ba1a5ac218"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a5a20ac76ee3bbcb4a4bb74ba1a5ac218">TOOL::Netflow::setProto</a></div><div class="ttdeci">void setProto(uint8_t newProto)</div><div class="ttdoc">Set method for TOOL::Netflow::proto. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00095">netflow.hpp:95</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1mac__addr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1mac__addr.xhtml">TOOL::mac_addr</a></div><div class="ttdoc">MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00040">tcpip_headers.hpp:40</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ether__hdr_xhtml_a4adf616cde89cd8b7bd96fd700662f92"><div class="ttname"><a href="struct_t_o_o_l_1_1ether__hdr.xhtml#a4adf616cde89cd8b7bd96fd700662f92">TOOL::ether_hdr::ether_dhost</a></div><div class="ttdeci">uint8_t ether_dhost[ETHER_ADDRLEN]</div><div class="ttdoc">destination MAC address </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00046">tcpip_headers.hpp:46</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml_a9340c95e0607709d793dc427c8b630e8"><div class="ttname"><a href="debug_8hpp.xhtml#a9340c95e0607709d793dc427c8b630e8">TOOL::log</a></div><div class="ttdeci">void log(LogLevel ll, Ts &amp;&amp;... args)</div><div class="ttdoc">Function that prints log messages. </div><div class="ttdef"><b>Definition:</b> <a href="debug_8hpp_source.xhtml#l00070">debug.hpp:70</a></div></div>
<div class="ttc" id="structpcap__ex_xhtml"><div class="ttname"><a href="structpcap__ex.xhtml">pcap_ex</a></div><div class="ttdoc">Exception used during pcap related errors. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00112">capturing.hpp:112</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1tcp__hdr_xhtml_a8269a35eb101628cc397b72757891454"><div class="ttname"><a href="struct_t_o_o_l_1_1tcp__hdr.xhtml#a8269a35eb101628cc397b72757891454">TOOL::tcp_hdr::th_dport</a></div><div class="ttdeci">uint16_t th_dport</div><div class="ttdoc">destination port </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00177">tcpip_headers.hpp:177</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip6__hdr_xhtml_abd3150ff5e53216dd43d1292cb8e8dc1"><div class="ttname"><a href="struct_t_o_o_l_1_1ip6__hdr.xhtml#abd3150ff5e53216dd43d1292cb8e8dc1">TOOL::ip6_hdr::ip6_src</a></div><div class="ttdeci">ip6_addr ip6_src</div><div class="ttdoc">source address </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00130">tcpip_headers.hpp:130</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a57f054682241948550cf310a78b1b787"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a57f054682241948550cf310a78b1b787">PROTO_IPv4</a></div><div class="ttdeci">#define PROTO_IPv4</div><div class="ttdoc">ID of IPv4 protocol (in network order) </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00034">tcpip_headers.hpp:34</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_afe2c1f981169f285ab188d1fbb6c6996"><div class="ttname"><a href="capturing_8cpp.xhtml#afe2c1f981169f285ab188d1fbb6c6996">g_macMcast4</a></div><div class="ttdeci">const mac_addr g_macMcast4</div><div class="ttdoc">IPv4 multicast MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00082">capturing.cpp:82</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a796d8f82917739002736e8d61c6fb635"><div class="ttname"><a href="capturing_8cpp.xhtml#a796d8f82917739002736e8d61c6fb635">startCapture</a></div><div class="ttdeci">int startCapture(const char *oFilename)</div><div class="ttdoc">Starts network traffic capture. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00099">capturing.cpp:99</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a6fcedd7165126a470d02412573dea7c3"><div class="ttname"><a href="capturing_8cpp.xhtml#a6fcedd7165126a470d02412573dea7c3">g_notFoundApps</a></div><div class="ttdeci">unsigned int g_notFoundApps</div><div class="ttdoc">Number of unsuccessful searches for application. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00095">capturing.cpp:95</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml"><div class="ttname"><a href="debug_8hpp.xhtml">debug.hpp</a></div><div class="ttdoc">Debugging functions. </div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a2cfdfb5c6f4dff163ab8ea770d47593f"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a2cfdfb5c6f4dff163ab8ea770d47593f">IPv6_HDRLEN</a></div><div class="ttdeci">#define IPv6_HDRLEN</div><div class="ttdoc">Size of IPv6 header. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00106">tcpip_headers.hpp:106</a></div></div>
<div class="ttc" id="netflow_8hpp_xhtml"><div class="ttname"><a href="netflow_8hpp.xhtml">netflow.hpp</a></div><div class="ttdoc">Netflow structure header file. </div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip6__hdr_xhtml_ab2b7c707351b08765c8baaf72f496896"><div class="ttname"><a href="struct_t_o_o_l_1_1ip6__hdr.xhtml#ab2b7c707351b08765c8baaf72f496896">TOOL::ip6_hdr::ip6_dst</a></div><div class="ttdeci">ip6_addr ip6_dst</div><div class="ttdoc">destination address </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00131">tcpip_headers.hpp:131</a></div></div>
<div class="ttc" id="ring_buffer_8hpp_xhtml"><div class="ttname"><a href="ring_buffer_8hpp.xhtml">ringBuffer.hpp</a></div><div class="ttdoc">Ring Buffer header file. </div></div>
<div class="ttc" id="file_handler_8cpp_xhtml_a9fb5f617541ea7938831450d69157f60"><div class="ttname"><a href="file_handler_8cpp.xhtml#a9fb5f617541ea7938831450d69157f60">TOOL::initOFile</a></div><div class="ttdeci">int initOFile(std::ofstream &amp;oFile)</div><div class="ttdoc">Creates the output file and writes SectionHeaderBlock and InterfaceDescriptionBlock to the file...</div><div class="ttdef"><b>Definition:</b> <a href="file_handler_8cpp_source.xhtml#l00041">fileHandler.cpp:41</a></div></div>
<div class="ttc" id="tool__linux_8hpp_xhtml"><div class="ttname"><a href="tool__linux_8hpp.xhtml">tool_linux.hpp</a></div><div class="ttdoc">Determining applications and their sockets on Linux. </div></div>
<div class="ttc" id="capturing_8cpp_xhtml_abdf9d4cab1c87115d4b3c1e3c0a8779a"><div class="ttname"><a href="capturing_8cpp.xhtml#abdf9d4cab1c87115d4b3c1e3c0a8779a">g_allSockets</a></div><div class="ttdeci">unsigned int g_allSockets</div><div class="ttdoc">Number of unique sockets. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00093">capturing.cpp:93</a></div></div>
<div class="ttc" id="tool__apple_8cpp_xhtml_abffa8d5a00da5ef52e025864e1b86829"><div class="ttname"><a href="tool__apple_8cpp.xhtml#abffa8d5a00da5ef52e025864e1b86829">TOOL::setDevMac</a></div><div class="ttdeci">int setDevMac()</div><div class="ttdoc">Sets mac address of g_dev interface into g_devMac. </div><div class="ttdef"><b>Definition:</b> <a href="tool__apple_8cpp_source.xhtml#l00021">tool_apple.cpp:21</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml_ac221ed54e26909d2296aec6415bf9b65"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml#ac221ed54e26909d2296aec6415bf9b65">TOOL::RingBuffer::notifyCondVar</a></div><div class="ttdeci">void notifyCondVar()</div><div class="ttdoc">Function notify all threads to check TOOL::RingBuffer::m_condVar. </div><div class="ttdef"><b>Definition:</b> <a href="ring_buffer_8hpp_source.xhtml#l00100">ringBuffer.hpp:100</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml_a887f9c58a59831ccccb32a4354ee80d3"><div class="ttname"><a href="debug_8hpp.xhtml#a887f9c58a59831ccccb32a4354ee80d3">D_ARRAY</a></div><div class="ttdeci">#define D_ARRAY(x, y)</div><div class="ttdoc">Debug macro which is substituted to nothing. </div><div class="ttdef"><b>Definition:</b> <a href="debug_8hpp_source.xhtml#l00121">debug.hpp:121</a></div></div>
<div class="ttc" id="utils_8hpp_xhtml"><div class="ttname"><a href="utils_8hpp.xhtml">utils.hpp</a></div><div class="ttdoc">Small useful functions header file. </div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a8ee3282bc313e547dbbb8d4f4010db61"><div class="ttname"><a href="capturing_8cpp.xhtml#a8ee3282bc313e547dbbb8d4f4010db61">signalHandler</a></div><div class="ttdeci">void signalHandler(int signum)</div><div class="ttdoc">Signal handler function. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00419">capturing.cpp:419</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1udp__hdr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1udp__hdr.xhtml">TOOL::udp_hdr</a></div><div class="ttdoc">UDP header structure. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00157">tcpip_headers.hpp:157</a></div></div>
<div class="ttc" id="struct_packet_handler_params_xhtml_a5a2b474680148b409795968bf797a529"><div class="ttname"><a href="struct_packet_handler_params.xhtml#a5a2b474680148b409795968bf797a529">PacketHandlerParams::cacheBuffer</a></div><div class="ttdeci">RingBuffer&lt; Netflow &gt; * cacheBuffer</div><div class="ttdoc">Used cache. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00058">capturing.hpp:58</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_ac2c1e2b89f875cf0cedf409166482463"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#ac2c1e2b89f875cf0cedf409166482463">TOOL::Netflow::setLocalPort</a></div><div class="ttdeci">void setLocalPort(uint16_t newPort)</div><div class="ttdoc">Set method for TOOL::Netflow::localPort. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00085">netflow.hpp:85</a></div></div>
<div class="ttc" id="capturing_8hpp_xhtml_a04f362029ec2a624fbcb7a30b20ff5f5a25831eea29609bc6ae3b24eca13dd682"><div class="ttname"><a href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5a25831eea29609bc6ae3b24eca13dd682">Directions::OUTBOUND</a></div><div class="ttdoc">Outgoing packets. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml_afe1bfc1344659d31ec56627448aebfea"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml#afe1bfc1344659d31ec56627448aebfea">TOOL::RingBuffer::push</a></div><div class="ttdeci">int push(T &amp;elem)</div><div class="ttdoc">Saves new structure into the buffer. </div><div class="ttdef"><b>Definition:</b> <a href="ring_buffer_8hpp_source.xhtml#l00037">ringBuffer.hpp:37</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_ae4bf63d759e297a812a6d197daad6006"><div class="ttname"><a href="capturing_8cpp.xhtml#ae4bf63d759e297a812a6d197daad6006">CACHE_RING_BUFFER_SIZE</a></div><div class="ttdeci">const unsigned int CACHE_RING_BUFFER_SIZE</div><div class="ttdoc">Size of the ring buffer. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00081">capturing.cpp:81</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1udp__hdr_xhtml_a9066c5a6a039ee52cbdf76c091aa1187"><div class="ttname"><a href="struct_t_o_o_l_1_1udp__hdr.xhtml#a9066c5a6a039ee52cbdf76c091aa1187">TOOL::udp_hdr::uh_dport</a></div><div class="ttdeci">uint16_t uh_dport</div><div class="ttdoc">destination port </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00159">tcpip_headers.hpp:159</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ether__hdr_xhtml_a61466a05fe1a3988bf4bcf5fad2a18f7"><div class="ttname"><a href="struct_t_o_o_l_1_1ether__hdr.xhtml#a61466a05fe1a3988bf4bcf5fad2a18f7">TOOL::ether_hdr::ether_type</a></div><div class="ttdeci">uint16_t ether_type</div><div class="ttdoc">Ethernet frame type. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00048">tcpip_headers.hpp:48</a></div></div>
<div class="ttc" id="tool__win_8hpp_xhtml"><div class="ttname"><a href="tool__win_8hpp.xhtml">tool_win.hpp</a></div><div class="ttdoc">Determining applications and their sockets on Windows. </div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a30a4aa41a243aeb1e88c49d09e65a48e"><div class="ttname"><a href="capturing_8cpp.xhtml#a30a4aa41a243aeb1e88c49d09e65a48e">parsePorts</a></div><div class="ttdeci">int parsePorts(Netflow &amp;n, Directions dir, void *hdr)</div><div class="ttdoc">Parses layer 4 header. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00374">capturing.cpp:374</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a4ac8ead1a5241b4d5218575215f1b34c"><div class="ttname"><a href="capturing_8cpp.xhtml#a4ac8ead1a5241b4d5218575215f1b34c">packetHandler</a></div><div class="ttdeci">void packetHandler(unsigned char *arg_array, const struct pcap_pkthdr *header, const unsigned char *packet)</div><div class="ttdoc">Function that processes every packet. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00255">capturing.cpp:255</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_custom_block_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_custom_block.xhtml">TOOL::CustomBlock</a></div><div class="ttdoc">Class with custom data. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00337">pcapng_blocks.hpp:337</a></div></div>
<div class="ttc" id="debug_8hpp_xhtml_a74021f021dcdfbb22891787b79c5529d"><div class="ttname"><a href="debug_8hpp.xhtml#a74021f021dcdfbb22891787b79c5529d">D</a></div><div class="ttdeci">#define D(...)</div><div class="ttdoc">Variadic debug macro which is substituted to nothing. </div><div class="ttdef"><b>Definition:</b> <a href="debug_8hpp_source.xhtml#l00125">debug.hpp:125</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip6__addr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1ip6__addr.xhtml">TOOL::ip6_addr</a></div><div class="ttdoc">IPv6 address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00111">tcpip_headers.hpp:111</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip6__hdr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1ip6__hdr.xhtml">TOOL::ip6_hdr</a></div><div class="ttdoc">IPv6 header structure. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00120">tcpip_headers.hpp:120</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a66c99b5dfab9066869a377e3a4f8cc7f"><div class="ttname"><a href="capturing_8cpp.xhtml#a66c99b5dfab9066869a377e3a4f8cc7f">g_dev</a></div><div class="ttdeci">const char * g_dev</div><div class="ttdoc">Capturing device name. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00088">capturing.cpp:88</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml">TOOL::Netflow</a></div><div class="ttdoc">Netflow class contains information about packet needed to uniquely determine a netflow it belongs to...</div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00032">netflow.hpp:32</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip4__hdr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1ip4__hdr.xhtml">TOOL::ip4_hdr</a></div><div class="ttdoc">IPv4 header structure. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00070">tcpip_headers.hpp:70</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a4764dc43b99fcd72e7d2ce7be93df2a5"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a4764dc43b99fcd72e7d2ce7be93df2a5">PROTO_IPv6</a></div><div class="ttdeci">#define PROTO_IPv6</div><div class="ttdoc">ID of IPv6 protocol (in network order) </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00035">tcpip_headers.hpp:35</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml">tcpip_headers.hpp</a></div><div class="ttdoc">Protocol headers. </div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a8a613c50d4b87e140b5006e66872c476"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a8a613c50d4b87e140b5006e66872c476">PROTO_UDPLITE</a></div><div class="ttdeci">#define PROTO_UDPLITE</div><div class="ttdoc">ID of UDPLite protocol. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00153">tcpip_headers.hpp:153</a></div></div>
<div class="ttc" id="struct_packet_handler_params_xhtml"><div class="ttname"><a href="struct_packet_handler_params.xhtml">PacketHandlerParams</a></div><div class="ttdoc">Struct used to pass packetHandler more pointers in one argument. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00052">capturing.hpp:52</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_aac0aba99c3eda1c02b40141750620ae7"><div class="ttname"><a href="capturing_8cpp.xhtml#aac0aba99c3eda1c02b40141750620ae7">g_notFoundSockets</a></div><div class="ttdeci">unsigned int g_notFoundSockets</div><div class="ttdoc">Number of unsuccessful searches for inode number. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00094">capturing.cpp:94</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1tcp__hdr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1tcp__hdr.xhtml">TOOL::tcp_hdr</a></div><div class="ttdoc">TCP header structure. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00175">tcpip_headers.hpp:175</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ip4__addr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1ip4__addr.xhtml">TOOL::ip4_addr</a></div><div class="ttdoc">IPv4 address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00065">tcpip_headers.hpp:65</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml_a24d1db9b6bebde32dfe3f0c3d36bc118"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml#a24d1db9b6bebde32dfe3f0c3d36bc118">TOOL::RingBuffer::getDroppedElem</a></div><div class="ttdeci">unsigned int getDroppedElem()</div><div class="ttdoc">Get method for TOOL::RingBuffer::droppedElem. </div><div class="ttdef"><b>Definition:</b> <a href="ring_buffer_8hpp_source.xhtml#l00072">ringBuffer.hpp:72</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a6769d8516457a0630af50fbc519bc3d5"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a6769d8516457a0630af50fbc519bc3d5">TOOL::Netflow::setLocalIp</a></div><div class="ttdeci">void setLocalIp(void *newIp)</div><div class="ttdoc">Set method for TOOL::Netflow::localIp. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00075">netflow.hpp:75</a></div></div>
<div class="ttc" id="cache_8hpp_xhtml"><div class="ttname"><a href="cache_8hpp.xhtml">cache.hpp</a></div><div class="ttdoc">Cache implementation header file. </div></div>
<div class="ttc" id="capturing_8hpp_xhtml_acd448353957d92c98fccc29e1fc8d927"><div class="ttname"><a href="capturing_8hpp.xhtml#acd448353957d92c98fccc29e1fc8d927">PCAP_ERRBUF_SIZE</a></div><div class="ttdeci">#define PCAP_ERRBUF_SIZE</div><div class="ttdoc">Size of a libpcap error buffer. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00034">capturing.hpp:34</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ether__hdr_xhtml_a8a6a25404e8986de198acb0aeb81c019"><div class="ttname"><a href="struct_t_o_o_l_1_1ether__hdr.xhtml#a8a6a25404e8986de198acb0aeb81c019">TOOL::ether_hdr::ether_shost</a></div><div class="ttdeci">uint8_t ether_shost[ETHER_ADDRLEN]</div><div class="ttdoc">source MAC address </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00047">tcpip_headers.hpp:47</a></div></div>
<div class="ttc" id="capturing_8hpp_xhtml_a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1"><div class="ttname"><a href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5adf8068ff1ff686a6956977a30ed264b1">Directions::INBOUND</a></div><div class="ttdoc">Incoming packets. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml_af8af96370fa0518ec0b601bdbddb4197"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml#af8af96370fa0518ec0b601bdbddb4197">TOOL::RingBuffer::run</a></div><div class="ttdeci">void run(Cache *c)</div><div class="ttdoc">Runs searching received packets in cache and determining applications for them. </div><div class="ttdef"><b>Definition:</b> <a href="ring_buffer_8hpp_source.xhtml#l00091">ringBuffer.hpp:91</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1tcp__hdr_xhtml_af8f5e8e7e0555a7e1f2d1b072e550096"><div class="ttname"><a href="struct_t_o_o_l_1_1tcp__hdr.xhtml#af8f5e8e7e0555a7e1f2d1b072e550096">TOOL::tcp_hdr::th_sport</a></div><div class="ttdeci">uint16_t th_sport</div><div class="ttdoc">source port </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00176">tcpip_headers.hpp:176</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a376082230cb4e203752490d95aebe041"><div class="ttname"><a href="capturing_8cpp.xhtml#a376082230cb4e203752490d95aebe041">rcvdPackets</a></div><div class="ttdeci">unsigned int rcvdPackets</div><div class="ttdoc">Number of received packets. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00092">capturing.cpp:92</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml_af824b93f12c5454587cc8f2d77a780f7"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml#af824b93f12c5454587cc8f2d77a780f7">TOOL::RingBuffer::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes whole buffer into the oFile. </div><div class="ttdef"><b>Definition:</b> <a href="ring_buffer_8hpp_source.xhtml#l00066">ringBuffer.hpp:66</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a9ffdcf7d5e586cacd1d48afe7af9505f"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a9ffdcf7d5e586cacd1d48afe7af9505f">PROTO_TCP</a></div><div class="ttdeci">#define PROTO_TCP</div><div class="ttdoc">ID of TCP protocol. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00172">tcpip_headers.hpp:172</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_custom_block_xhtml_aef9b0da921b7014d415c3afc4b2f3dab"><div class="ttname"><a href="class_t_o_o_l_1_1_custom_block.xhtml#aef9b0da921b7014d415c3afc4b2f3dab">TOOL::CustomBlock::write</a></div><div class="ttdeci">void write(ofstream &amp;file)</div><div class="ttdoc">Writes the whole block into the file. </div><div class="ttdef"><b>Definition:</b> <a href="pcapng__blocks_8hpp_source.xhtml#l00354">pcapng_blocks.hpp:354</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a2d1caabab7793c2cb4eb96863da5299a"><div class="ttname"><a href="capturing_8cpp.xhtml#a2d1caabab7793c2cb4eb96863da5299a">getPacketDirection</a></div><div class="ttdeci">Directions getPacketDirection(ether_hdr *eth_hdr)</div><div class="ttdoc">Determines packet derection. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00306">capturing.cpp:306</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_ring_buffer_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_ring_buffer.xhtml">TOOL::RingBuffer&lt; EnhancedPacketBlock &gt;</a></div></div>
<div class="ttc" id="struct_t_o_o_l_1_1mac__addr_xhtml_a300953da210b9b54c4b8dbc73d650f3f"><div class="ttname"><a href="struct_t_o_o_l_1_1mac__addr.xhtml#a300953da210b9b54c4b8dbc73d650f3f">TOOL::mac_addr::bytes</a></div><div class="ttdeci">unsigned char bytes[ETHER_ADDRLEN]</div><div class="ttdoc">Parts of MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00041">tcpip_headers.hpp:41</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a558e8af914d980beef4e071458d452cb"><div class="ttname"><a href="capturing_8cpp.xhtml#a558e8af914d980beef4e071458d452cb">g_macMcast6</a></div><div class="ttdeci">const mac_addr g_macMcast6</div><div class="ttdoc">IPv6 multicast MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00083">capturing.cpp:83</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_cache_xhtml"><div class="ttname"><a href="class_t_o_o_l_1_1_cache.xhtml">TOOL::Cache</a></div><div class="ttdoc">Cache contains map of open local ports. </div><div class="ttdef"><b>Definition:</b> <a href="cache_8hpp_source.xhtml#l00353">cache.hpp:353</a></div></div>
<div class="ttc" id="capturing_8hpp_xhtml"><div class="ttname"><a href="capturing_8hpp.xhtml">capturing.hpp</a></div><div class="ttdoc">Network traffic capture header file. </div></div>
<div class="ttc" id="struct_t_o_o_l_1_1udp__hdr_xhtml_a12d81a0098313941d65c8a30920faff7"><div class="ttname"><a href="struct_t_o_o_l_1_1udp__hdr.xhtml#a12d81a0098313941d65c8a30920faff7">TOOL::udp_hdr::uh_ulen</a></div><div class="ttdeci">uint16_t uh_ulen</div><div class="ttdoc">udp length </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00160">tcpip_headers.hpp:160</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a811a9c0dd5d4b0f0bb5848e764d91017"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a811a9c0dd5d4b0f0bb5848e764d91017">PROTO_UDP</a></div><div class="ttdeci">#define PROTO_UDP</div><div class="ttdoc">ID of UDP protocol. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00152">tcpip_headers.hpp:152</a></div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a605c07e74f3e6dac46a4c075bbc8bacc"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a605c07e74f3e6dac46a4c075bbc8bacc">TOOL::Netflow::setEndTime</a></div><div class="ttdeci">void setEndTime(uint64_t newTime)</div><div class="ttdoc">Set method for TOOL::Netflow::endTime. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00115">netflow.hpp:115</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_ac5e8774a93b1990be25926da6a65bd69"><div class="ttname"><a href="capturing_8cpp.xhtml#ac5e8774a93b1990be25926da6a65bd69">g_macBcast</a></div><div class="ttdeci">const mac_addr g_macBcast</div><div class="ttdoc">Broadcast MAC address. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00084">capturing.cpp:84</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_a19863254fb16f3b3e521e8b885094a72"><div class="ttname"><a href="capturing_8cpp.xhtml#a19863254fb16f3b3e521e8b885094a72">g_finalResults</a></div><div class="ttdeci">map&lt; string, vector&lt; Netflow * &gt; &gt; g_finalResults</div><div class="ttdoc">Applications and their netflows. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00086">capturing.cpp:86</a></div></div>
<div class="ttc" id="namespace_t_o_o_l_xhtml"><div class="ttname"><a href="namespace_t_o_o_l.xhtml">TOOL</a></div><div class="ttdef"><b>Definition:</b> <a href="cache_8cpp_source.xhtml#l00037">cache.cpp:37</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_afe4484ccc3aeaf1e0353daea7290dbd1"><div class="ttname"><a href="capturing_8cpp.xhtml#afe4484ccc3aeaf1e0353daea7290dbd1">g_pcapHandle</a></div><div class="ttdeci">pcap_t * g_pcapHandle</div><div class="ttdoc">Pcap handle. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00087">capturing.cpp:87</a></div></div>
<div class="ttc" id="file_handler_8hpp_xhtml"><div class="ttname"><a href="file_handler_8hpp.xhtml">fileHandler.hpp</a></div><div class="ttdoc">File handler header file. </div></div>
<div class="ttc" id="struct_t_o_o_l_1_1ether__hdr_xhtml"><div class="ttname"><a href="struct_t_o_o_l_1_1ether__hdr.xhtml">TOOL::ether_hdr</a></div><div class="ttdoc">Ethernet header structure. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00045">tcpip_headers.hpp:45</a></div></div>
<div class="ttc" id="tcpip__headers_8hpp_xhtml_a4491832e10227e3f3b6116fe1eada74c"><div class="ttname"><a href="tcpip__headers_8hpp.xhtml#a4491832e10227e3f3b6116fe1eada74c">ETHER_HDRLEN</a></div><div class="ttdeci">#define ETHER_HDRLEN</div><div class="ttdoc">Size of Ethernet header. </div><div class="ttdef"><b>Definition:</b> <a href="tcpip__headers_8hpp_source.xhtml#l00033">tcpip_headers.hpp:33</a></div></div>
<div class="ttc" id="capturing_8hpp_xhtml_a04f362029ec2a624fbcb7a30b20ff5f5a696b031073e74bf2cb98e5ef201d4aa3"><div class="ttname"><a href="capturing_8hpp.xhtml#a04f362029ec2a624fbcb7a30b20ff5f5a696b031073e74bf2cb98e5ef201d4aa3">Directions::UNKNOWN</a></div><div class="ttdoc">Direction is not known. </div></div>
<div class="ttc" id="class_t_o_o_l_1_1_netflow_xhtml_a90e60833b8662f06ca181452aafaa27e"><div class="ttname"><a href="class_t_o_o_l_1_1_netflow.xhtml#a90e60833b8662f06ca181452aafaa27e">TOOL::Netflow::getProto</a></div><div class="ttdeci">uint8_t getProto()</div><div class="ttdoc">Get method for TOOL::Netflow::proto. </div><div class="ttdef"><b>Definition:</b> <a href="netflow_8hpp_source.xhtml#l00090">netflow.hpp:90</a></div></div>
<div class="ttc" id="struct_packet_handler_params_xhtml_a86fe14679b96ab04dae7961cf51c17a2"><div class="ttname"><a href="struct_packet_handler_params.xhtml#a86fe14679b96ab04dae7961cf51c17a2">PacketHandlerParams::fileBuffer</a></div><div class="ttdeci">RingBuffer&lt; EnhancedPacketBlock &gt; * fileBuffer</div><div class="ttdoc">Pointer to RingBuffer which will be written to a file. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8hpp_source.xhtml#l00057">capturing.hpp:57</a></div></div>
<div class="ttc" id="capturing_8cpp_xhtml_ac57265207f75eaf6768bf4bfade3a9f9"><div class="ttname"><a href="capturing_8cpp.xhtml#ac57265207f75eaf6768bf4bfade3a9f9">FILE_RING_BUFFER_SIZE</a></div><div class="ttdeci">const unsigned int FILE_RING_BUFFER_SIZE</div><div class="ttdoc">Size of the ring buffer. </div><div class="ttdef"><b>Definition:</b> <a href="capturing_8cpp_source.xhtml#l00080">capturing.cpp:80</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="capturing_8cpp.xhtml">capturing.cpp</a></li>
    <li class="footer">Generated on Thu May 25 2017 17:05:08 for Network Traffic Capture With Application Tags by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.13 </li>
  </ul>
</div>
</body>
</html>
