/**
*  @file       namon_win.cpp
*  @brief      Determining the applications and their sockets on macOS
*  @author     Jozef Zuzelka <xzuzel00@stud.fit.vutbr.cz>
*  @date
*   - Created: 13.04.2017 00:11
*   - Edited:  
*  @todo       rename this file
*/



#include <fstream>          //  ifstream
#include <winsock2.h>
#include <WS2tcpip.h>		//	PMIB_*6*_OWNER_PID
#include <Iphlpapi.h>		//	GetAdaptersAddresses(), GetExtended*Table()

#include <iostream>

#include "netflow.hpp"      //  Netflow
#include "cache.hpp"        //  Cache
#include "debug.hpp"		//	log()
#include "namon_win.hpp"


#pragma comment(lib, "Iphlpapi.lib")	//	GetAdaptersAddresses(), GetExtended*Table()
#define WORKING_BUFFER_SIZE 15000




namespace NAMON
{


// https://msdn.microsoft.com/en-us/library/windows/desktop/aa365915(v=vs.85).aspx
int setDevMac()
{
	PIP_ADAPTER_ADDRESSES pAddresses = nullptr;
	DWORD retVal = 0;
	ULONG outBufLen = 0;
	ULONG family = AF_UNSPEC; // both IPv4 and IPv6

	pAddresses = (IP_ADAPTER_ADDRESSES *)malloc(sizeof(outBufLen));
	if (!pAddresses)
	{
		log(LogLevel::ERR, "Can't allocate memory for IP_ADAPTER_ADDRESSES struct");
		return -1;
	}
	
	std::cout << "DWORD: " << sizeof(DWORD) << std::endl;

	retVal = GetAdaptersAddresses(family, GAA_FLAG_INCLUDE_ALL_INTERFACES, nullptr, pAddresses, &outBufLen);
	if (retVal == ERROR_BUFFER_OVERFLOW)
	{
		free(pAddresses);
		log(LogLevel::ERR, "Error allocating memory needed to call GetAdaptersInfo()");
		return -1;
	}

	if (retVal != NO_ERROR)
	{
		free(pAddresses);
		log(LogLevel::ERR, "Call to GetAdaptersAddresses failed with error: ", retVal);
		return -1;
	}

	for (PIP_ADAPTER_ADDRESSES pos = pAddresses; pos; pos = pos->Next)
	{
		std::cout << "Description: " << pos->Description << " Name: " << pos->AdapterName << std::endl;
		if (pos->PhysicalAddressLength != 0)
		{
			for (int i = 0; i < (int)pos->PhysicalAddressLength; i++)
				std::cout << ":" << (int)pos->PhysicalAddress[i];
			return -1;
		}
		else
			std::cout << "No ethernet address!";

		std::cout << std::endl;
	}

	free(pAddresses);
	return -1;
}


int getPid(Netflow *n)
{
	int family;
	if (n->getIpVersion() == 4)
	{
		if (n->getProto() == PROTO_TCP)
			getConnectionOwner<PMIB_TCPTABLE_OWNER_PID, MIB_TCPROW_OWNER_PID, TCP_TABLE_CLASS>(n, AF_INET, TCP_TABLE_OWNER_PID_ALL);
		else if (n->getProto() == PROTO_UDP)
			getConnectionOwner<PMIB_UDPTABLE_OWNER_PID, MIB_UDPROW_OWNER_PID, UDP_TABLE_CLASS>(n, AF_INET, UDP_TABLE_OWNER_PID);
		else
		{
			log(LogLevel::WARNING, "Unsupported transport layer protocol in getPid(). (", n->getProto(), ")");
			return -1;
		}
	}
	else if (n->getIpVersion() == 6)
	{
		if (n->getProto() == PROTO_TCP)
			getConnectionOwner<PMIB_TCP6TABLE_OWNER_PID, MIB_TCP6ROW_OWNER_PID, TCP_TABLE_CLASS>(n, AF_INET6, TCP_TABLE_OWNER_PID_ALL);
		else if (n->getProto() == PROTO_UDP)
			getConnectionOwner<PMIB_UDP6TABLE_OWNER_PID, MIB_UDP6ROW_OWNER_PID, UDP_TABLE_CLASS>(n, AF_INET6, UDP_TABLE_OWNER_PID);
		else
		{
			log(LogLevel::WARNING, "Unsupported transport layer protocol in getPid(). (", n->getProto(), ")");
			return -1;
		}
	}
	else
	{
		log(LogLevel::WARNING, "Unsupported IP version in getPid(). (", n->getIpVersion(), ")");
		return -1;
	}
}


int getApp(const int pid, string &appname)
{
	return -1;
}


}	// namespace NAMON
